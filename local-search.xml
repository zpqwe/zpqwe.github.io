<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker-Compose工具使用</title>
    <link href="/2025/02/24/docker-Compose%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/02/24/docker-Compose%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p><a href="https://zpqwe.github.io/2025/02/15/DockerFile%E4%BC%98%E5%8C%96%E9%95%9C%E5%83%8F%E4%BD%93%E7%A7%AF/">上一篇</a></p><p><strong>Docker Compose是一个用于定义和运行多个Docker容器的工具。它允许用户通过一个简单的YAML格式的配置文件（通常是docker-compose.yml）来定义应用程序的服务、网络和卷，然后通过单个命令来启动整个应用程序。</strong></p><h3 id="docker-compose-常用命令">docker-compose 常用命令</h3><h3 id="二、安装Docker-Compose">二、安装Docker Compose</h3><ol><li><p>下载Docker Compose：</p><ul><li>访问Docker Compose的GitHub发布页面，找到适合您操作系统的版本并下载。</li><li>您也可以使用包管理工具（如pip）来安装Docker Compose。</li></ul></li><li><p>安装Docker Compose：</p><ul><li>将下载的Docker Compose二进制文件移动到系统路径中（如/usr/local/bin）。</li><li>为Docker Compose文件添加执行权限。</li><li>验证安装是否成功，通过运行<code>docker-compose --version</code>来查看版本信息。</li></ul><p>1、安装Docker Compose</p><p><a href="https://github.com/docker/compose/releases/download/v2.30.1/docker-compose-linux-x86_64">下载链接</a>：</p><p>将文件上传到服务器</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250224125518526.png" alt="image-20250224125518526"></p><p>文件重命名：</p><p><code>mv /home/root123/docker-compose-linux-x86_64 /usr/local/docker-compose</code></p><p>对文件进行授权</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></tbody></table></figure><p>验证是否安装成功：</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250224125732555.png" alt="image-20250224125732555"></p></li></ol><h3 id="三、掌握Docker-Compose的配置文件">三、掌握Docker Compose的配置文件</h3><ol><li><p>理解docker-compose.yml的结构：</p><ul><li>version：指定Docker Compose文件格式的版本。</li><li>services：定义服务（容器），每个服务都通过image或build指令来指定镜像。</li><li>networks：定义容器间的网络连接。</li><li>volumes：定义数据卷，用于数据持久化。</li></ul></li><li><p>学习常用字段及说明：</p><ul><li>image：指定使用的镜像。</li><li>build：指定Dockerfile的路径或构建上下文来构建镜像。</li><li>ports：暴露容器的端口。</li><li>environment：设置环境变量。</li><li>depends_on：定义服务间的依赖关系。</li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span>  <span class="hljs-comment"># 使用官方的 Redis 镜像，你可以指定具体版本，如 redis:6.2.6</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">my-redis</span>  <span class="hljs-comment"># 自定义容器名称</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>  <span class="hljs-comment"># 设置容器总是重启，以确保服务的高可用性</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">"6379:6379"</span>  <span class="hljs-comment"># 将容器的 6379 端口映射到宿主机的 6379 端口</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-data:/data</span>  <span class="hljs-comment"># 将宿主机的 ./redis-data 目录挂载到容器的 /data 目录，用于数据持久化</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis.conf:/etc/redis/redis.conf:ro</span>  <span class="hljs-comment"># 将宿主机的 redis.conf 文件挂载到容器的 /etc/redis/redis.conf，并设置为只读</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">/etc/redis/redis.conf</span>  <span class="hljs-comment"># 使用指定的配置文件启动 Redis 服务器</span><br><br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="docker-compose-yml文件配置常用字段及说明">docker-compose.yml文件配置常用字段及说明</h3><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250224181045794.png" alt="image-20250224181045794"></p><h3 id="四、使用Docker-Compose管理容器">四、使用Docker Compose管理容器</h3><ol><li><p>启动服务：</p><ul><li>使用<code>docker-compose up</code>命令来启动服务。该命令会创建并启动所有定义的服务。</li><li>使用<code>-d</code>选项可以在后台运行服务。</li></ul><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250224130306496.png" alt="image-20250224130306496"></p></li><li><p>停止服务：</p><ul><li>使用<code>docker-compose down</code>命令来停止并删除所有服务、网络和卷（除非它们是外部定义的）。</li></ul><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250224130240997.png" alt="image-20250224130240997"></p></li><li><p>查看服务状态：</p><ul><li>使用<code>docker-compose ps</code>命令来查看当前运行的服务和容器的状态。</li></ul><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250224130327816.png" alt="image-20250224130327816"></p></li><li><p>查看日志：</p><ul><li>使用<code>docker-compose logs</code>命令来查看服务的日志输出。</li></ul><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250224130354558.png" alt="image-20250224130354558"></p></li></ol><p>Docker Compose常用命令</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250224181140782.png" alt="image-20250224181140782"></p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python文件读写和异常处理</title>
    <link href="/2025/02/21/python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2025/02/21/python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p><strong>python处理文件读写，CVS文件、Excel文件、Word文件，操作PDF文件</strong></p><h2 id="文件读写和异常处理">文件读写和异常处理</h2><h3 id="1、打开和关闭文件">1、打开和关闭文件</h3><p><code>open</code> 函数</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250221163856019.png" alt="image-20250221163856019"></p><h4 id="2、读写文本文件">2、读写文本文件</h4><p>二者对比，少了finally块中的代码，代码变得优雅了，不会出现忘记关闭io流的情况</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250221170823613.png" alt="image-20250221170823613"></p><h4 id="3、读写二进制文件">3、读写二进制文件</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'QQ图片20210731200950.jpg'</span>,<span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> f:<br>        data=f.read()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'泷.jpg'</span>,<span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(data)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'指定的文件无法打开'</span>)<br><span class="hljs-keyword">except</span> IOError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'读写文件时出现错误'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'程序执行错误'</span>)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#如果要复制的图片很大，一次将文件内容读入内存可能会造成非常大的内存开销，为了减少对内存的占用，</span><br><span class="hljs-comment"># 可以为read方法传入size参数来指定每次读取的字节数</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"QQ图片20210731200950.jpg"</span>,<span class="hljs-string">"rb"</span>) <span class="hljs-keyword">as</span> f1,<span class="hljs-built_in">open</span>(<span class="hljs-string">'泷2.jpg'</span>,<span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> f2:<br>        data=f1.read(<span class="hljs-number">512</span>)<br>        <span class="hljs-keyword">while</span> data:<br>            f2.write(data)<br>            data = f1.read(<span class="hljs-number">512</span>)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'指定的文件无法打开'</span>)<br><span class="hljs-keyword">except</span> IOError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'读写文件时出现错误'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'程序执行结束'</span>)<br></code></pre></td></tr></tbody></table></figure><h4 id="对象的序列化和反序列化">对象的序列化和反序列化</h4><p><code>python</code>和<code>javascript</code>数据类型对应关系</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250221173702118.png" alt="image-20250221173702118"></p><p><strong>对象的序列号和反序列化</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#对象序列号和反序列化</span><br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment">#读写json格式的数据</span><br>my_dict = {<br>    <span class="hljs-string">'name'</span>: <span class="hljs-string">'骆昊'</span>,<br>    <span class="hljs-string">'age'</span>: <span class="hljs-number">40</span>,<br>    <span class="hljs-string">'friends'</span>: [<span class="hljs-string">'王大锤'</span>, <span class="hljs-string">'白元芳'</span>],<br>    <span class="hljs-string">'cars'</span>: [<br>        {<span class="hljs-string">'brand'</span>: <span class="hljs-string">'BMW'</span>, <span class="hljs-string">'max_speed'</span>: <span class="hljs-number">240</span>},<br>        {<span class="hljs-string">'brand'</span>: <span class="hljs-string">'Audi'</span>, <span class="hljs-string">'max_speed'</span>: <span class="hljs-number">280</span>},<br>        {<span class="hljs-string">'brand'</span>: <span class="hljs-string">'Benz'</span>, <span class="hljs-string">'max_speed'</span>: <span class="hljs-number">280</span>}<br>    ]<br>}<br><span class="hljs-comment"># print(json.dumps(my_dict))</span><br><span class="hljs-comment">#如果要将字典处理成JSON格式并写入文本文件，只需要将dumps函数换成dump函数并传入文件对象即可，代码如下所示。</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'my_dict.json'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:<br>    json.dump(my_dict, f)<br></code></pre></td></tr></tbody></table></figure><p><code>json</code>模块有四个比较重要的函数，分别是：</p><ul><li><code>dump</code> - 将Python对象按照JSON格式序列化到文件中</li><li><code>dumps</code> - 将Python对象处理成JSON格式的字符串</li><li><code>load</code> - 将文件中的JSON数据反序列化成对象</li><li><code>loads</code> - 将字符串的内容反序列化成Python对象</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'my_dict.json'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-built_in">dict</span>=json.load(f)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">dict</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">dict</span>)<br></code></pre></td></tr></tbody></table></figure><h4 id="包管理工具">包管理工具</h4><p>Python标准库中的<code>json</code>模块在数据序列化和反序列化时性能并不是非常理想，为了解决这个问题，可以使用三方库<code>ujson</code>来替换<code>json</code>。所谓三方库，是指非公司内部开发和使用的，也不是来自于官方标准库的Python模块，这些模块通常由其他公司、组织或个人开发，所以被称为三方库。虽然Python语言的标准库虽然已经提供了诸多模块来方便我们的开发，但是对于一个强大的语言来说，它的生态圈一定也是非常繁荣的。</p><p>之前安装Python解释器时，默认情况下已经勾选了安装pip，大家可以在命令提示符或终端中通过<code>pip --version</code>来确定是否已经拥有了pip。pip是Python的包管理工具，通过pip可以查找、安装、卸载、更新Python的三方库或工具，macOS和Linux系统应该使用pip3。例如要安装替代<code>json</code>模块的<code>ujson</code>，可以使用下面的命令。</p><h3 id="2、使用网络API获取数据">2、使用网络API获取数据</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 基本参数配置</span><br>apiUrl = <span class="hljs-string">'http://v.juhe.cn/toutiao/index'</span>  <span class="hljs-comment"># 接口请求URL</span><br>apiKey = <span class="hljs-string">''</span>  <span class="hljs-comment"># 在个人中心-&gt;我的数据,接口名称上方查看</span><br><br><span class="hljs-comment"># 接口请求入参配置</span><br>requestParams = {<br>    <span class="hljs-string">'key'</span>: apiKey,<br>    <span class="hljs-string">'type'</span>: <span class="hljs-string">''</span>,<br>    <span class="hljs-string">'page'</span>: <span class="hljs-string">''</span>,<br>    <span class="hljs-string">'page_size'</span>: <span class="hljs-string">''</span>,<br>    <span class="hljs-string">'is_filter'</span>: <span class="hljs-string">''</span>,<br>}<br><span class="hljs-comment"># 发起接口网络请求</span><br>response = requests.get(apiUrl, params=requestParams)<br><br><span class="hljs-comment"># 解析响应结果</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    responseResult = response.json()<br>    <span class="hljs-comment"># 网络请求成功。可依据业务逻辑和接口文档说明自行处理。</span><br>    <span class="hljs-built_in">print</span>(responseResult)<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> responseResult[<span class="hljs-string">'result'</span>][<span class="hljs-string">'data'</span>]:<br>        <span class="hljs-built_in">print</span>(data)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 网络异常等因素，解析结果异常。可依据业务逻辑自行处理。</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'请求异常'</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="3、操作CVS">3、操作CVS</h3><h4 id="将数据写入CSV文件">将数据写入CSV文件</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将数据写入CSV文件</span><br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'hello.csv'</span>,<span class="hljs-string">'w'</span>,newline=<span class="hljs-string">''</span>) <span class="hljs-keyword">as</span> f:<br>    writer = csv.writer(f)<br>    writer.writerow([<span class="hljs-string">'姓名'</span>,<span class="hljs-string">'语文'</span>,<span class="hljs-string">'数学'</span>,<span class="hljs-string">'英语'</span>])<br>    names=[<span class="hljs-string">'关羽'</span>,<span class="hljs-string">'赵云'</span>,<span class="hljs-string">'马超'</span>,<span class="hljs-string">'黄忠'</span>]<br>    <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names:<br>        scores=[random.randrange(<span class="hljs-number">50</span>,<span class="hljs-number">101</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>        scores.insert(<span class="hljs-number">0</span>,name)<br>        writer.writerow(scores)<br></code></pre></td></tr></tbody></table></figure><h4 id="从CSV文件读取数据">从CSV文件读取数据</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#读取CVS文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'hello.csv'</span>,<span class="hljs-string">'r'</span>,newline=<span class="hljs-string">''</span>) <span class="hljs-keyword">as</span> f:<br>    reader=csv.reader(f,delimiter=<span class="hljs-string">'|'</span>,quoting=csv.QUOTE_ALL)<br>    <span class="hljs-keyword">for</span> data_list <span class="hljs-keyword">in</span> reader:<br>        <span class="hljs-built_in">print</span>(reader.line_num, end=<span class="hljs-string">'\t'</span>)<br>        <span class="hljs-built_in">print</span>(data_list)<br>        <span class="hljs-comment"># for item in data_list:</span><br>        <span class="hljs-comment">#     print(item,end='\t')</span><br></code></pre></td></tr></tbody></table></figure><p>将来如果大家使用Python做数据分析，很有可能会用到名为<code>pandas</code>的三方库，它是Python数据分析的神器之一。<code>pandas</code>中封装了名为<code>read_csv</code>和<code>to_csv</code>的函数用来读写CSV文件，其中<code>read_CSV</code>会将读取到的数据变成一个<code>DataFrame</code>对象，而<code>DataFrame</code>就是<code>pandas</code>库中最重要的类型，它封装了一系列用于数据处理的方法（清洗、转换、聚合等）；而<code>to_csv</code>会将<code>DataFrame</code>对象中的数据写入CSV文件，完成数据的持久化。<code>read_csv</code>函数和<code>to_csv</code>函数远远比原生的<code>csvreader</code>和<code>csvwriter</code>强大。</p><h3 id="4、操作Excel文件">4、操作Excel文件</h3><h4 id="Python读写Excel文件-1">Python读写Excel文件-1</h4><p>本章我们先讲解基于<code>xlwt</code>和<code>xlrd</code>操作 Excel 文件，大家可以先使用下面的命令安装这两个三方库以及配合使用的工具模块<code>xlutils</code>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install xlwt xlrd xlutils<br></code></pre></td></tr></tbody></table></figure><h4 id="读Excel文件">读Excel文件</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> openpyxl<br><span class="hljs-keyword">from</span> openpyxl.utils <span class="hljs-keyword">import</span> get_column_letter<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-comment"># 使用openpyxl库的load_workbook函数打开指定Excel文件并获得Workbook对象（工作簿）</span><br>wb = openpyxl.load_workbook(<span class="hljs-string">'2022年股票数据.xlsx'</span>)  <span class="hljs-comment"># 请确保文件名和路径正确</span><br><br><span class="hljs-comment"># 通过Workbook对象的sheetnames属性可以获取所有表单名称</span><br>sheetnames = wb.sheetnames<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"工作表名称："</span>, sheetnames)<br><br><span class="hljs-comment"># 选择第一个工作表（您也可以根据名称选择特定的工作表）</span><br>sheet = wb[sheetnames[<span class="hljs-number">0</span>]]<br><br><span class="hljs-comment"># 获取表单的行数和列数（注意：openpyxl没有直接的nrows和ncols属性，但可以通过max_row和max_column获取）</span><br>max_row = sheet.max_row<br>max_column = sheet.max_column<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"行数："</span>, max_row, <span class="hljs-string">"列数："</span>, max_column)<br><br><span class="hljs-comment"># 遍历每一行和每一列，获取单元格中的值并进行格式化处理</span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> sheet.iter_rows(values_only=<span class="hljs-literal">True</span>):<br>    <span class="hljs-keyword">for</span> col_idx, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(row):<br>        <span class="hljs-comment"># 对除首行外的其他行进行数据格式化处理</span><br>        <span class="hljs-keyword">if</span> row[<span class="hljs-number">0</span>] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> row[<span class="hljs-number">0</span>] != sheet.cell(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">1</span>).value:  <span class="hljs-comment"># 假设第一行为标题行</span><br>            <span class="hljs-comment"># 第1列的日期类型先转成datetime对象再格式化为“年月日”的格式</span><br>            <span class="hljs-keyword">if</span> col_idx == <span class="hljs-number">0</span>:<br>                <span class="hljs-comment"># openpyxl读取的日期是datetime对象（如果单元格格式正确的话）</span><br>                <span class="hljs-comment"># 这里我们直接进行格式化</span><br>                value = value.strftime(<span class="hljs-string">'%Y年%m月%d日'</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(value, datetime) <span class="hljs-keyword">else</span> value<br>            <span class="hljs-comment"># 其他列的number类型处理成小数点后保留两位有效数字的浮点数（如果已经是字符串则不处理）</span><br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(value, (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>)):<br>                value = <span class="hljs-string">f'<span class="hljs-subst">{value:<span class="hljs-number">.2</span>f}</span>'</span><br><br>        <span class="hljs-comment"># 打印值，使用制表符分隔</span><br>        <span class="hljs-built_in">print</span>(value, end=<span class="hljs-string">'\t'</span>)<br>    <span class="hljs-built_in">print</span>()<br><br><span class="hljs-comment"># 完成后关闭工作簿（可选，但推荐执行以释放资源）</span><br>wb.close()<br></code></pre></td></tr></tbody></table></figure><h4 id="写Excel文件">写Excel文件</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#写入excel文件</span><br>student_names=[<span class="hljs-string">'关羽'</span>,<span class="hljs-string">'张飞'</span>,<span class="hljs-string">'赵云'</span>,<span class="hljs-string">'马超'</span>,<span class="hljs-string">'黄忠'</span>]<br>scores=[[random.randrange(<span class="hljs-number">50</span>,<span class="hljs-number">101</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br>wb=xlwt.Workbook()<br>sheet=wb.add_sheet(<span class="hljs-string">'一年级二班'</span>)<br>titles=(<span class="hljs-string">'姓名'</span>,<span class="hljs-string">'语文'</span>,<span class="hljs-string">'数学'</span>,<span class="hljs-string">'英语'</span>)<br><br><span class="hljs-keyword">for</span> index,title <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(titles):<br>    sheet.write(<span class="hljs-number">0</span>,index,title)<br>sheet=header_style()<br><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(scores)):<br>    sheet.write(row+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,student_names[row])<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(scores[row])):<br>        sheet.write(row+<span class="hljs-number">1</span>,col+<span class="hljs-number">1</span>,scores[row][col])<br><span class="hljs-comment">#保存工作簿</span><br>wb.save(<span class="hljs-string">'考试成绩表.xls'</span>)<br></code></pre></td></tr></tbody></table></figure><h4 id="调整单元格样式">调整单元格样式</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">header_style</span>():<br>    header_style = xlwt.XFStyle()<br>    pattern = xlwt.Pattern()<br>    pattern.pattern = xlwt.Pattern.SOLID_PATTERN<br>    <span class="hljs-comment"># 0 - 黑色、1 - 白色、2 - 红色、3 - 绿色、4 - 蓝色、5 - 黄色、6 - 粉色、7 - 青色</span><br>    pattern.pattern_fore_colour = <span class="hljs-number">5</span><br>    header_style.pattern = pattern<br>    titles = (<span class="hljs-string">'姓名'</span>, <span class="hljs-string">'语文'</span>, <span class="hljs-string">'数学'</span>, <span class="hljs-string">'英语'</span>)<br>    <span class="hljs-keyword">for</span> index, title <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(titles):<br>        sheet.write(<span class="hljs-number">0</span>, index, title, header_style)<br>    <span class="hljs-keyword">return</span> sheet<br></code></pre></td></tr></tbody></table></figure><h4 id="调整单元格样式-2">调整单元格样式</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">header_style = xlwt.XFStyle()<br>pattern = xlwt.Pattern()<br>pattern.pattern = xlwt.Pattern.SOLID_PATTERN<br><span class="hljs-comment"># 0 - 黑色、1 - 白色、2 - 红色、3 - 绿色、4 - 蓝色、5 - 黄色、6 - 粉色、7 - 青色</span><br>pattern.pattern_fore_colour = <span class="hljs-number">5</span><br>header_style.pattern = pattern<br>titles = (<span class="hljs-string">'姓名'</span>, <span class="hljs-string">'语文'</span>, <span class="hljs-string">'数学'</span>, <span class="hljs-string">'英语'</span>)<br><span class="hljs-keyword">for</span> index, title <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(titles):<br>    sheet.write(<span class="hljs-number">0</span>, index, title, header_style)<br></code></pre></td></tr></tbody></table></figure><p>调整文字样式</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">font_size</span>(<span class="hljs-params">header_style</span>):<br>    font=xlwt.Font()<br>    font.name=<span class="hljs-string">'华文楷体'</span><br>    font.height=<span class="hljs-number">20</span>*<span class="hljs-number">18</span><br>    font.bold=<span class="hljs-literal">True</span><br>    font.italic=<span class="hljs-literal">False</span><br>    font.color_index=<span class="hljs-number">1</span><br>    header_style.font=font<br>    <span class="hljs-keyword">return</span> header_style<br></code></pre></td></tr></tbody></table></figure><p>完整代码块</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">font_size</span>(<span class="hljs-params">header_style</span>):<br>    font=xlwt.Font()<br>    font.name=<span class="hljs-string">'华文楷体'</span><br>    font.height=<span class="hljs-number">20</span>*<span class="hljs-number">18</span><br>    font.bold=<span class="hljs-literal">True</span><br>    font.italic=<span class="hljs-literal">False</span><br>    font.color_index=<span class="hljs-number">1</span><br>    header_style.font=font<br>    <span class="hljs-keyword">return</span> header_style<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">header_style</span>():<br>    header_style = xlwt.XFStyle()<br>    pattern = xlwt.Pattern()<br>    pattern.pattern = xlwt.Pattern.SOLID_PATTERN<br>    <span class="hljs-comment"># 0 - 黑色、1 - 白色、2 - 红色、3 - 绿色、4 - 蓝色、5 - 黄色、6 - 粉色、7 - 青色</span><br>    pattern.pattern_fore_colour = <span class="hljs-number">5</span><br>    header_style.pattern = pattern<br>    header_style=font_size(header_style)<br>    titles = (<span class="hljs-string">'姓名'</span>, <span class="hljs-string">'语文'</span>, <span class="hljs-string">'数学'</span>, <span class="hljs-string">'英语'</span>)<br>    <span class="hljs-keyword">for</span> index, title <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(titles):<br>        sheet.write(<span class="hljs-number">0</span>, index, title, header_style)<br>    <span class="hljs-keyword">return</span> sheet<br><br><span class="hljs-comment">#写入excel文件</span><br>student_names=[<span class="hljs-string">'关羽'</span>,<span class="hljs-string">'张飞'</span>,<span class="hljs-string">'赵云'</span>,<span class="hljs-string">'马超'</span>,<span class="hljs-string">'黄忠'</span>]<br>scores=[[random.randrange(<span class="hljs-number">50</span>,<span class="hljs-number">101</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br>wb=xlwt.Workbook()<br>sheet=wb.add_sheet(<span class="hljs-string">'一年级二班'</span>)<br><span class="hljs-comment"># titles=('姓名','语文','数学','英语')</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># for index,title in enumerate(titles):</span><br><span class="hljs-comment">#     sheet.write(0,index,title)</span><br>sheet=header_style()<br><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(scores)):<br>    sheet.write(row+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,student_names[row])<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(scores[row])):<br>        sheet.write(row+<span class="hljs-number">1</span>,col+<span class="hljs-number">1</span>,scores[row][col])<br><span class="hljs-comment">#保存工作簿</span><br>wb.save(<span class="hljs-string">'考试成绩表.xls'</span>)<br></code></pre></td></tr></tbody></table></figure><p>掌握了 Python 程序操作 Excel 的方法，可以解决日常办公中很多繁琐的处理 Excel 电子表格工作，最常见就是将多个数据格式相同的 Excel 文件合并到一个文件以及从多个 Excel 文件或表单中提取指定的数据。当然，如果要对表格数据进行处理，使用 Python 数据分析神器之一的 pandas 库可能更为方便。</p><p>openpyxl读写Excel</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">import</span> openpyxl<br><br>wb=openpyxl.load_workbook(<span class="hljs-string">'2022年股票数据.xlsx'</span>)<br><span class="hljs-built_in">print</span>(wb.sheetnames)<br>sheet=wb.worksheets[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(sheet.dimensions)<br><span class="hljs-built_in">print</span>(sheet.max_row,sheet.max_column)<br><br><span class="hljs-comment">#获取指定单元格的值</span><br><span class="hljs-built_in">print</span>(sheet.cell(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>).value)<br><span class="hljs-built_in">print</span>(sheet[<span class="hljs-string">'C3'</span>].value)<br><span class="hljs-built_in">print</span>(sheet[<span class="hljs-string">'G255'</span>].value)<br><br><span class="hljs-built_in">print</span>(sheet[<span class="hljs-string">'A2:C5'</span>])<br><span class="hljs-comment">#读取所有单元格的内容</span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,sheet.max_row+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> col_ch <span class="hljs-keyword">in</span> <span class="hljs-string">'ABCDEFG'</span>:<br>        value=sheet[<span class="hljs-string">f'<span class="hljs-subst">{col_ch}</span><span class="hljs-subst">{row}</span>'</span>].value<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value)==datetime.datetime:<br>            <span class="hljs-built_in">print</span>(value.strftime(<span class="hljs-string">'%Y年%m月%d'</span>),end=<span class="hljs-string">'\t'</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(value)==<span class="hljs-built_in">int</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{value:&lt;10d}</span>'</span>,end=<span class="hljs-string">'\t'</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(value)==<span class="hljs-built_in">float</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{value:<span class="hljs-number">.4</span>F}</span>'</span>,end=<span class="hljs-string">'\t'</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(value)<br>    <span class="hljs-built_in">print</span>()<br><br>wb=openpyxl.Workbook()<br>sheet=wb.active<br>sheet.title=<span class="hljs-string">'期末成绩'</span><br>titles=(<span class="hljs-string">'姓名'</span>,<span class="hljs-string">'语文'</span>,<span class="hljs-string">'数学'</span>,<span class="hljs-string">'英语'</span>)<br><span class="hljs-keyword">for</span> col_index,title <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(titles):<br>    sheet.cell(<span class="hljs-number">1</span>,col_index+<span class="hljs-number">1</span>,title)<br><br>names= (<span class="hljs-string">'关羽'</span>, <span class="hljs-string">'张飞'</span>, <span class="hljs-string">'赵云'</span>, <span class="hljs-string">'马超'</span>, <span class="hljs-string">'黄忠'</span>)<br><span class="hljs-keyword">for</span> row_index,name <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(names):<br>    sheet.cell(row_index+<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,name)<br>    <span class="hljs-keyword">for</span> col_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>):<br>        sheet.cell(row_index+<span class="hljs-number">2</span>,col_index,random.randrange(<span class="hljs-number">50</span>,<span class="hljs-number">101</span>))<br><br>wb.save(<span class="hljs-string">'考试成绩表.xlsx'</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="5、操作Word文件">5、操作Word文件</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> docx <span class="hljs-keyword">import</span> Document<br><span class="hljs-keyword">from</span> docx.shared <span class="hljs-keyword">import</span> Pt, Cm<br><br>document=Document() <span class="hljs-comment"># type: Doc</span><br>document.add_heading(<span class="hljs-string">'快快乐乐学Python'</span>,<span class="hljs-number">0</span>)<br>p=document.add_paragraph(<span class="hljs-string">'Python是一门非常流行的语言，它'</span>)<br>run=p.add_run(<span class="hljs-string">'简单'</span>)<br>run.bold=<span class="hljs-literal">True</span><br>run.font.size=Pt(<span class="hljs-number">18</span>)<br>p.add_run(<span class="hljs-string">'而且'</span>)<br>run=p.add_run(<span class="hljs-string">'优雅'</span>)<br>run.font.size=Pt(<span class="hljs-number">18</span>)<br>run.underline=<span class="hljs-literal">True</span><br>p.add_run(<span class="hljs-string">'。'</span>)<br><span class="hljs-comment">#添加一级标题</span><br>document.add_heading(<span class="hljs-string">'Heading,leven 1'</span>,level=<span class="hljs-number">1</span>)<br>document.add_paragraph(<span class="hljs-string">'Intense quote'</span>,style=<span class="hljs-string">'Intense Quote'</span>)<br><span class="hljs-comment">#添加无序列表</span><br>document.add_paragraph(<span class="hljs-string">'first item in unordered list'</span>,style=<span class="hljs-string">'List Bullet'</span>)<br>document.add_paragraph(<span class="hljs-string">'second item in unordered list'</span>,style=<span class="hljs-string">'List Bullet'</span>)<br><span class="hljs-comment">#添加有序列表</span><br>document.add_paragraph(<span class="hljs-string">'first item in ordered list'</span>,style=<span class="hljs-string">'List Number'</span>)<br>document.add_paragraph(<span class="hljs-string">'second item in ordered list'</span>,style=<span class="hljs-string">'List Number'</span>)<br><span class="hljs-comment">#添加图片</span><br>document.add_picture(<span class="hljs-string">'泷.jpg'</span>,width=Cm(<span class="hljs-number">5.2</span>))<br><span class="hljs-comment">#添加分节符</span><br>document.add_section()<br>records=(<br>    (<span class="hljs-string">'罗汉'</span>,<span class="hljs-string">'男'</span>,<span class="hljs-string">'1999-10-11'</span>),<br>    (<span class="hljs-string">'李大元'</span>,<span class="hljs-string">'女'</span>,<span class="hljs-string">'1999-10-12'</span>),<br>)<br><span class="hljs-comment">#添加表格</span><br>table =document.add_table(rows=<span class="hljs-number">1</span>,cols=<span class="hljs-number">3</span>)<br>table.style=<span class="hljs-string">'Dark List'</span><br>hdr_cells = table.rows[<span class="hljs-number">0</span>].cells<br>hdr_cells[<span class="hljs-number">0</span>].text=<span class="hljs-string">'姓名'</span><br>hdr_cells[<span class="hljs-number">1</span>].text=<span class="hljs-string">'性别'</span><br>hdr_cells[<span class="hljs-number">2</span>].text=<span class="hljs-string">'出生日期'</span><br><span class="hljs-comment">#为表格添加行</span><br><span class="hljs-keyword">for</span> name,sex,birthday <span class="hljs-keyword">in</span> records:<br>    row_cells = table.add_row().cells<br>    row_cells[<span class="hljs-number">0</span>].text=name<br>    row_cells[<span class="hljs-number">1</span>].text=sex<br>    row_cells[<span class="hljs-number">2</span>].text=birthday<br><span class="hljs-comment">#添加分页符</span><br>document.add_page_break()<br><span class="hljs-comment">#保存文档</span><br>document.save(<span class="hljs-string">'demo.docx'</span>)<br><br><br></code></pre></td></tr></tbody></table></figure><p>遍历word文件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">doc=Document(<span class="hljs-string">'demo.docx'</span>)<br><span class="hljs-keyword">for</span> no,p <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(doc.paragraphs):<br>    <span class="hljs-built_in">print</span>(no,p.text)<br></code></pre></td></tr></tbody></table></figure><h3 id="6、操作PDF文件">6、操作PDF文件</h3><h3 id="7、python处理图像">7、python处理图像</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageFilter<br><br>image=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">'泷.jpg'</span>)<br><span class="hljs-built_in">print</span>(image.<span class="hljs-built_in">format</span>)<br><span class="hljs-built_in">print</span>(image.size)<br><span class="hljs-built_in">print</span>(image.mode)<br>image.show()<br><br><span class="hljs-comment">#裁剪图像</span><br><span class="hljs-comment"># image.crop((80,20,310,360)).show()</span><br><span class="hljs-comment">#生成缩略图</span><br>image.thumbnail((<span class="hljs-number">128</span>,<span class="hljs-number">128</span>))<br><span class="hljs-comment"># image.show()</span><br><span class="hljs-comment">#缩放和粘贴图像</span><br>luoao_image=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">'泷.jpg'</span>)<br>guido_image=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">'泷.jpg'</span>)<br>head=guido_image.crop((<span class="hljs-number">80</span>,<span class="hljs-number">20</span>,<span class="hljs-number">310</span>,<span class="hljs-number">360</span>))<br>width,height=head.size<br>image.paste(head.resize((<span class="hljs-built_in">int</span>(width/<span class="hljs-number">1.5</span>),<span class="hljs-built_in">int</span>(height/<span class="hljs-number">1.5</span>))),(<span class="hljs-number">172</span>,<span class="hljs-number">40</span>))<br>image.show()<br><br>image=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">'泷.jpg'</span>)<br>image.rotate(<span class="hljs-number">45</span>).show()<br>image.transpose(Image.FLIP_TOP_BOTTOM).show()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">80</span>,<span class="hljs-number">310</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>,<span class="hljs-number">360</span>):<br>        image.putpixel((x,y),(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br>image.show()<br><br><span class="hljs-comment">#滤镜效果</span><br>image.<span class="hljs-built_in">filter</span>(ImageFilter.CONTOUR).show()<br></code></pre></td></tr></tbody></table></figure><h3 id="使用Pillow绘图">使用Pillow绘图</h3><p>Pillow 中有一个名为<code>ImageDraw</code>的模块，该模块的<code>Draw</code>函数会返回一个<code>ImageDraw</code>对象，通过<code>ImageDraw</code>对象的<code>arc</code>、<code>line</code>、<code>rectangle</code>、<code>ellipse</code>、<code>polygon</code>等方法，可以在图像上绘制出圆弧、线条、矩形、椭圆、多边形等形状，也可以通过该对象的<code>text</code>方法在图像上添加文字。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image,ImageDraw,ImageFont<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_color</span>():<br>    <span class="hljs-string">"""生成随机颜色"""</span><br>    r = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)<br>    g = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)<br>    b = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)<br>    <span class="hljs-keyword">return</span> (r,g,b)<br>width,height=<span class="hljs-number">800</span>,<span class="hljs-number">600</span><br>image=Image.new(<span class="hljs-string">'RGB'</span>,(width,height),color=(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>drawer=ImageDraw.Draw(image)<br>font=ImageFont.truetype(<span class="hljs-string">'楷体_GB2312.ttf'</span>,<span class="hljs-number">32</span>)<br>drawer.text((<span class="hljs-number">300</span>,<span class="hljs-number">50</span>),<span class="hljs-string">'Hello'</span>,font=font,fill=(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>drawer.line((<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,width,height),fill=(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>),width=<span class="hljs-number">2</span>)<br>drawer.line((width,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,height),fill=(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>),width=<span class="hljs-number">2</span>)<br>xy=width//<span class="hljs-number">2</span>-<span class="hljs-number">60</span>,height//<span class="hljs-number">2</span>-<span class="hljs-number">60</span>,width//<span class="hljs-number">2</span>+<span class="hljs-number">60</span>,height//<span class="hljs-number">2</span>+<span class="hljs-number">60</span><br>drawer.rectangle(xy,outline=(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),width=<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    left,top,right,bottom=<span class="hljs-number">150</span>+i*<span class="hljs-number">120</span>,<span class="hljs-number">220</span>,<span class="hljs-number">310</span>+i*<span class="hljs-number">120</span>,<span class="hljs-number">380</span><br>    drawer.ellipse((left,top,right,bottom),outline=random_color(),width=<span class="hljs-number">8</span>)<br><br><span class="hljs-comment">#显示图像</span><br>image.show()<br>image.save(<span class="hljs-string">'result.png'</span>)<br></code></pre></td></tr></tbody></table></figure><blockquote><p><strong>注意</strong>：上面代码中使用的字体文件需要根据自己准备，可以选择自己喜欢的字体文件并放置在代码目录下。</p></blockquote><h3 id="总结">总结</h3><p>使用 Python 语言做开发，除了可以用 Pillow 来处理图像外，还可以使用更为强大的 OpenCV 库来完成图形图像的处理，OpenCV（<strong>Open</strong> Source <strong>C</strong>omputer <strong>V</strong>ision Library）是一个跨平台的计算机视觉库，可以用来开发实时图像处理、计算机视觉和模式识别程序。在我们的日常工作中，有很多繁琐乏味的任务其实都可以通过 Python 程序来处理，编程的目的就是让计算机帮助我们解决问题，减少重复乏味的劳动。通过本章节的学习，相信大家已经感受到了使用 Python 程序绘图改图的乐趣，其实 Python 能做的事情还远不止这些，继续你的学习吧。</p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>文件读写</tag>
      
      <tag>异常处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java经验快速学习python！</title>
    <link href="/2025/02/19/java%E7%BB%8F%E9%AA%8C%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0python%EF%BC%81/"/>
    <url>/2025/02/19/java%E7%BB%8F%E9%AA%8C%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0python%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p>前言：现在python的应用方向越来越多了，如日中天的DeepSeek也是python开发的，目前现在的大学生学习的也是python语言，感受到了，这是一个趋势，不能不了解这门语言了。</p><h2 id="font-color-red-本篇文档会一直更新！！！-font"><font color="red">本篇文档会一直更新！！！</font></h2><p>通过在github开源100天可以看到，按照上面的学习路线结合人工智能的定向方案，一起学习。</p><p>下方图片：我半年以前是有学习过一遍了，太久没用了，过一遍基础操作，半小时理解一下。</p><h2 id="变量、分支结构、循环结构、数据结构【列表、元组、集合字典】">变量、分支结构、循环结构、数据结构【列表、元组、集合字典】</h2><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250219015702357.png" alt="image-20250219015702357"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-comment"># 学习python的输入输出打印 +变量定义</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">123.456</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1.23456e2</span>)<br>radius=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入圆的半径：'</span>))<br><span class="hljs-built_in">print</span>(radius)<br>area=math.pi * radius ** <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'面积: <span class="hljs-subst">{area}</span>'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'面积: <span class="hljs-subst">{area:<span class="hljs-number">.2</span>f}</span>'</span>)<br><br><span class="hljs-comment"># 学习类型转换 +打印输出格式化 +判断语句 ifelse和match+case</span><br>height = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'身高(cm)：'</span>))<br>weight = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'体重(kg)：'</span>))<br>bmi = weight / (height / <span class="hljs-number">100</span>) ** <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{bmi = :<span class="hljs-number">.1</span>f}</span>'</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">18.5</span> &lt;= bmi &lt; <span class="hljs-number">24</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'你的身材很棒！'</span>)<br><br>status=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">"响应状态码："</span>))<br><span class="hljs-keyword">match</span> status:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">400</span>:<br>        description=<span class="hljs-string">'Bad Request'</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:<br>        description=<span class="hljs-string">'Unauthorized'</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">402</span>:<br>        description=<span class="hljs-string">'Forbidden'</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:<br>        description=<span class="hljs-string">'Forbidden'</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">500</span> |<span class="hljs-number">501</span>:<br>        description=<span class="hljs-string">'Server Error'</span><br>    <span class="hljs-keyword">case</span> _:<br>        description=<span class="hljs-string">'Unknown Error'</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'状态码：'</span>,description)<br><span class="hljs-comment"># 学习 range 函数+ time模块sleep休眠函数</span><br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'Hello World!'</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 学习random 随机数+range函数生成1-5999的数字</span><br><span class="hljs-keyword">import</span> random<br><br>f1=<span class="hljs-number">0</span><br>f2=<span class="hljs-number">0</span><br>f3=<span class="hljs-number">0</span><br>f4=<span class="hljs-number">0</span><br>f5=<span class="hljs-number">0</span><br>f6=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6000</span>):<br>    face=random.randrange(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>)<br>    <span class="hljs-keyword">if</span> face==<span class="hljs-number">1</span>:<br>        f1+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> face==<span class="hljs-number">2</span>:<br>        f2+=<span class="hljs-number">2</span><br>    <span class="hljs-keyword">elif</span> face==<span class="hljs-number">3</span>:<br>        f3+=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">elif</span> face==<span class="hljs-number">4</span>:<br>        f4+=<span class="hljs-number">4</span><br>    <span class="hljs-keyword">elif</span> face==<span class="hljs-number">5</span>:<br>        f5+=<span class="hljs-number">5</span><br>    <span class="hljs-keyword">elif</span> face==<span class="hljs-number">6</span>:<br>        f6+=<span class="hljs-number">6</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'1点出现了<span class="hljs-subst">{f1}</span>次'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'2点出现了<span class="hljs-subst">{f2}</span>次'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'3点出现了<span class="hljs-subst">{f3}</span>次'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'4点出现了<span class="hljs-subst">{f4}</span>次'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'5点出现了<span class="hljs-subst">{f5}</span>次'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'6点出现了<span class="hljs-subst">{f6}</span>次'</span>)<br><span class="hljs-comment"># 学习列表 取值与定义，可以点进去具体方法里面看都有什么类型的方法</span><br>items=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>))<br><span class="hljs-built_in">print</span>(items)<br><br>items=[<span class="hljs-string">'Python'</span>,<span class="hljs-string">'Java'</span>,<span class="hljs-string">'C++'</span>,<span class="hljs-string">'C#'</span>,<span class="hljs-string">'JavaScript'</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-string">'Python'</span> <span class="hljs-keyword">in</span> items:<br>    items.reverse()<br><span class="hljs-built_in">print</span>(items)<br></code></pre></td></tr></tbody></table></figure><h2 id="python常用内置函数">python常用内置函数</h2><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250219015305219.png" alt="image-20250219015305219"></p><h3 id="元组和列表的比较">元组和列表的比较</h3><p>这里还有一个非常值得探讨的问题，Python 中已经有了列表类型，为什么还需要元组这样的类型呢？这个问题对于初学者来说似乎有点困难，不过没有关系，我们先抛出观点，大家可以一边学习一边慢慢体会。</p><ol><li>元组是不可变类型，<strong>不可变类型更适合多线程环境</strong>，因为它降低了并发访问变量的同步化开销。关于这一点，我们会在后面讲解并发编程的时候跟大家一起探讨。</li><li>元组是不可变类型，通常<strong>不可变类型在创建时间上优于对应的可变类型</strong>。我们可以使用<code>timeit</code>模块的<code>timeit</code>函数来看看创建保存相同元素的元组和列表各自花费的时间，<code>timeit</code>函数的<code>number</code>参数表示代码执行的次数。下面的代码中，我们分别创建了保存<code>1</code>到<code>9</code>的整数的列表和元组，每个操作执行<code>10000000</code>次，统计运行时间。</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> timeit<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'%.3f 秒'</span> % timeit.timeit(<span class="hljs-string">'[1, 2, 3, 4, 5, 6, 7, 8, 9]'</span>, number=<span class="hljs-number">10000000</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'%.3f 秒'</span> % timeit.timeit(<span class="hljs-string">'(1, 2, 3, 4, 5, 6, 7, 8, 9)'</span>, number=<span class="hljs-number">10000000</span>))<br></code></pre></td></tr></tbody></table></figure><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">items</span>=list(range(100))<br><span class="hljs-built_in">print</span>(items)<br><br>items=[<span class="hljs-string">'Python'</span>,<span class="hljs-string">'Java'</span>,<span class="hljs-string">'C++'</span>,<span class="hljs-string">'C#'</span>,<span class="hljs-string">'JavaScript'</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-string">'Python'</span> <span class="hljs-keyword">in</span> items:<br>    items.reverse()<br><span class="hljs-built_in">print</span>(items)<br><br><span class="hljs-comment">#同类型三元组</span><br>t1=(32,45,96)<br><span class="hljs-comment"># 不同类型四元组</span><br>t2=(23,<span class="hljs-string">'zhangsan'</span>,<span class="hljs-literal">True</span>,<span class="hljs-string">'lisi'</span>)<br><span class="hljs-comment"># 学习type函数，查看变量的类型</span><br><span class="hljs-built_in">print</span>(type(t1))<br><span class="hljs-built_in">print</span>(type(t2))<br><span class="hljs-comment"># 学习 len函数，查看变量的数量</span><br><span class="hljs-built_in">print</span>(len(t1))<br><span class="hljs-built_in">print</span>(len(t2))<br><span class="hljs-comment"># 学习 元组的索引计算</span><br><span class="hljs-built_in">print</span>(t1[0])<br><span class="hljs-built_in">print</span>(t1[1])<br><span class="hljs-built_in">print</span>(t1[-1])<br><span class="hljs-built_in">print</span>(t1[-2])<br><span class="hljs-comment">#学习切片运算</span><br><span class="hljs-built_in">print</span>(t2[:2]) # 切片，在切片第2个元素前结束<br><span class="hljs-built_in">print</span>(t2[::3]) # 切片，从0开始，在下标3前结束<br><span class="hljs-comment"># 循环打印元组元素</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t1:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 成员运算 下方的例子可以看成if判断</span><br><span class="hljs-built_in">print</span>(32 <span class="hljs-keyword">in</span> t1) #<span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(45 <span class="hljs-keyword">in</span> t1) #<span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(78 <span class="hljs-keyword">in</span> t1) #<span class="hljs-literal">False</span><br><span class="hljs-comment"># 拼接运算 元组t1+元组t2 成为一个新元组t3</span><br><span class="hljs-attribute">t3</span>=t1+t2<br><span class="hljs-built_in">print</span>(t3)<br><span class="hljs-comment"># 比较运算</span><br><span class="hljs-built_in">print</span>(t1 == t3)            # <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(t1 &gt;= t3)            # <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(t1 &lt;= (35, 11, 99))  # <span class="hljs-literal">False</span><br><span class="hljs-comment"># 学习打包和解包操作</span><br><span class="hljs-comment"># 打包操作</span><br>a = 1, 10, 100<br><span class="hljs-built_in">print</span>(type(a))  # &lt;class <span class="hljs-string">'tuple'</span>&gt;<br><span class="hljs-built_in">print</span>(a)        # (1, 10, 100)<br><span class="hljs-comment"># 解包操作</span><br>i, j, k = a<br><span class="hljs-built_in">print</span>(i, j, k)  # 1 10 100<br><br><span class="hljs-comment"># 学习集合</span><br>tupic=(1,2,3,4) # 这是一个元组<br><span class="hljs-built_in">print</span>(tupic)<br>list={1,2,3,4,5,6,7,8,9,10} # 这是一个集合<br><span class="hljs-built_in">print</span>(list)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(<span class="hljs-string">'hello'</span>))<br><span class="hljs-comment">#学习字典</span><br>dict1={<span class="hljs-string">'a'</span>:1,<span class="hljs-string">'b'</span>:2,<span class="hljs-string">'c'</span>:3,<span class="hljs-string">'d'</span>:4}<br><span class="hljs-built_in">print</span>(dict1)<br></code></pre></td></tr></tbody></table></figure><h2 id="字符串占位符">字符串占位符</h2><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250219130251690.png" alt="image-20250219130251690"></p><h2 id="函数的使用进阶，以及函数的高级应用">函数的使用进阶，以及函数的高级应用</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> operator<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 所有数字和所有字母的字符集</span><br>chars=string.digits+string.ascii_letters<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_code</span>(<span class="hljs-params">*,code_len=<span class="hljs-number">4</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join(random.choices(chars,k=code_len))<br><span class="hljs-comment"># 学习 定义入参类型 num:int，和定义返回参数类型 -&gt;bool</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">num:<span class="hljs-built_in">int</span></span>)-&gt;<span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">"""</span><br><span class="hljs-string">        判断一个正整数是不是质数</span><br><span class="hljs-string">        :param num: 大于1的正整数</span><br><span class="hljs-string">        :return: 如果num是质数返回True，否则返回False</span><br><span class="hljs-string">        """</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">int</span>(num**<span class="hljs-number">0.5</span>)+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> num%i==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(generate_code())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">*args,**kwargs</span>):<br>    items=<span class="hljs-built_in">list</span>(args)+<span class="hljs-built_in">list</span>(kwargs.values())<br>    result=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(item) <span class="hljs-keyword">in</span> (<span class="hljs-built_in">int</span>,<span class="hljs-built_in">float</span>)):<br>            result+=item<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">int_value,of_func,*args,**kwargs</span>):<br>    items=<span class="hljs-built_in">list</span>(args)+<span class="hljs-built_in">list</span>(kwargs.values())<br>    result=int_value<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(item) <span class="hljs-keyword">in</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">float</span>)):<br>            result=of_func(result,item)<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">return</span> x*y<br><span class="hljs-comment"># 学习将函数传递给函数</span><br><span class="hljs-comment"># 通过参数名的方式</span><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">0</span>,add,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">1</span>,mul,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_even</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">return</span> num%<span class="hljs-number">2</span>==<span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">return</span> num**<span class="hljs-number">2</span><br>old_nums=[<span class="hljs-number">35</span>,<span class="hljs-number">46</span>,<span class="hljs-number">73</span>,<span class="hljs-number">52</span>,<span class="hljs-number">90</span>]<br>nums_news=[num **<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> old_nums <span class="hljs-keyword">if</span> num%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(nums_news)<br><br><span class="hljs-comment">#lambda函数</span><br>old_nums = [<span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">60</span>, <span class="hljs-number">52</span>]<br>new_nums=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>,<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> y:y%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>,old_nums)))<br><span class="hljs-built_in">print</span>(new_nums)<br><br><span class="hljs-comment">#用一段代码实现计算阶乘的函数</span><br>fac=<span class="hljs-keyword">lambda</span> n:functools.reduce(operator.mul,<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#用一段代码实现判断素数的函数</span><br>is_prime =<span class="hljs-keyword">lambda</span> x:<span class="hljs-built_in">all</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> f:x%f,<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">int</span>(x**<span class="hljs-number">0.5</span>)+<span class="hljs-number">1</span>)))<br><br><span class="hljs-comment">#调用lambda 函数</span><br><span class="hljs-built_in">print</span>(fac(<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(is_prime(<span class="hljs-number">37</span>))<br><br><br><br><br><span class="hljs-comment"># 装饰器函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recode_time</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">    @functools.wraps(<span class="hljs-params">func</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args,**kwargs</span>):<br>        start=time.time()<br>        result=func(*args,**kwargs)<br>        end =time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{func.__name__}</span>执行时间:<span class="hljs-subst">{end-start:<span class="hljs-number">.2</span>f}</span>秒'</span>)<br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-comment">#学习装饰器函数</span><br><span class="hljs-meta">@recode_time</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">down</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f'正在下载<span class="hljs-subst">{filename}</span>'</span>)<br>    time.sleep(random.random()*<span class="hljs-number">6</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{filename}</span>下载完成'</span>)<br><br><span class="hljs-meta">@recode_time</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f'正在上传<span class="hljs-subst">{filename}</span>'</span>)<br>    time.sleep(random.random()*<span class="hljs-number">8</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{filename}</span>上传完成'</span>)<br><br>down(<span class="hljs-string">'Mysql从删库到跑路'</span>)<br>upload(<span class="hljs-string">'Python从入门到住院'</span>)<br><br><br></code></pre></td></tr></tbody></table></figure><p>递归调用</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 递归调用</span><br><span class="hljs-comment"># 使用 Python 标准库中functools模块的lru_cache函数来优化上面的递归代码</span><br><span class="hljs-meta">@functools.lru_cache</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fac</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> num*fac(num-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(fac(<span class="hljs-number">5</span>))<br></code></pre></td></tr></tbody></table></figure><p>面相对象编程应用小例子</p><p><a href="http://Employee.py">Employee.py</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>(metaclass=ABCMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.name=name<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">15000.00</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Programmer</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self,name,working_hour=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)<br>        <span class="hljs-variable language_">self</span>.working_hour=working_hour<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span>*<span class="hljs-variable language_">self</span>.working_hour<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Salesman</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sales=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)<br>        <span class="hljs-variable language_">self</span>.sales=sales<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1800</span>*<span class="hljs-variable language_">self</span>.sales*<span class="hljs-number">0.05</span><br><br>emps=[Manager(<span class="hljs-string">'刘备'</span>),Programmer(<span class="hljs-string">'诸葛亮'</span>),Manager(<span class="hljs-string">'曹操'</span>),Programmer(<span class="hljs-string">'荀彧'</span>),Salesman(<span class="hljs-string">'张辽'</span>)]<br><span class="hljs-keyword">for</span> emp <span class="hljs-keyword">in</span> emps:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(emp,Programmer):<br>        emp.working_hour=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f'请输入<span class="hljs-subst">{emp.name}</span>本月工作时间'</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(emp,Salesman):<br>        emp.sales=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f'请输入<span class="hljs-subst">{emp.name}</span>本月销售额'</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{emp.name}</span>本月工资为：￥<span class="hljs-subst">{emp.get_salary():<span class="hljs-number">.2</span>f}</span>元'</span>)<br><br></code></pre></td></tr></tbody></table></figure><p><a href="http://Card.py">Card.py</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Suite</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    SPADE,HEART,CLUB,DIAMOND=<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)<br><br><span class="hljs-keyword">for</span> suite <span class="hljs-keyword">in</span> Suite:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{suite}</span>:<span class="hljs-subst">{suite.value}</span>'</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,suite,face</span>):<br>        <span class="hljs-variable language_">self</span>.suite=suite<br>        <span class="hljs-variable language_">self</span>.face=face<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        suites=<span class="hljs-string">'♠♥♣♦'</span><br>        faces=[<span class="hljs-string">''</span>, <span class="hljs-string">'A'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'7'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'10'</span>, <span class="hljs-string">'J'</span>, <span class="hljs-string">'Q'</span>, <span class="hljs-string">'K'</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f'<span class="hljs-subst">{suites[self.suite.value]}</span><span class="hljs-subst">{faces[self.face]}</span>'</span><span class="hljs-comment">#返回牌的花色和点数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__lt__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.suite == other.suite:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.face &lt; other.face<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.suite.value&lt;other.suite.value<br>card1=Card(Suite.SPADE,<span class="hljs-number">5</span>)<br>card2=Card(Suite.HEART,<span class="hljs-number">13</span>)<br><span class="hljs-built_in">print</span>(card1)<br><span class="hljs-built_in">print</span>(card2)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Poker</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.cards=[Card(suite,face)<br>                    <span class="hljs-keyword">for</span> suite <span class="hljs-keyword">in</span> Suite<br>                    <span class="hljs-keyword">for</span> face <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">14</span>)]<br>        <span class="hljs-variable language_">self</span>.current=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shuffle</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.current=<span class="hljs-number">0</span><br>        random.shuffle(<span class="hljs-variable language_">self</span>.cards)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deal</span>(<span class="hljs-params">self</span>):<br>        card=<span class="hljs-variable language_">self</span>.cards[<span class="hljs-variable language_">self</span>.current]<br>        <span class="hljs-variable language_">self</span>.current+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> card<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.current &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.cards)<br><br>poker=Poker()<br><span class="hljs-built_in">print</span>(poker.cards)<br>poker.shuffle()<br><span class="hljs-built_in">print</span>(poker.cards)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.name=name<br>        <span class="hljs-variable language_">self</span>.cards=[]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_one</span>(<span class="hljs-params">self,card</span>):<br>        <span class="hljs-variable language_">self</span>.cards.append(card)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">arrange</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.cards.sort()<br>poker=Poker()<br>poker.shuffle()<br>players=[Player(<span class="hljs-string">'东邪'</span>),Player(<span class="hljs-string">'西毒'</span>),Player(<span class="hljs-string">'南帝'</span>),Player(<span class="hljs-string">'北丐'</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>    <span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players:<br>        player.get_one(poker.deal())<br><span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players:<br>    player.arrange()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{player.name}</span>:'</span>,end=<span class="hljs-string">''</span>)<br>    <span class="hljs-built_in">print</span>(player.cards)<br></code></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>学习路线</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>与人工智能协作，java基础篇，2025面试题过关斩将</title>
    <link href="/2025/02/18/%E4%B8%8E%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8D%8F%E4%BD%9C%EF%BC%8Cjava%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%8C2025%E9%9D%A2%E8%AF%95%E9%A2%98%E8%BF%87%E5%85%B3%E6%96%A9%E5%B0%86/"/>
    <url>/2025/02/18/%E4%B8%8E%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8D%8F%E4%BD%9C%EF%BC%8Cjava%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%8C2025%E9%9D%A2%E8%AF%95%E9%A2%98%E8%BF%87%E5%85%B3%E6%96%A9%E5%B0%86/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p>给每一个找工作和非找工作的人观看。</p><p>众所周知，工作中呢，基础知识就会忘得很快，因为工作中很少会留意到这种基础知识，或者是说工作中具体功能用的比较多，但是不会关心是由什么实现的。</p><p>毕竟上班已经很忙了，需求在催、业务在催、自己空闲的时候也很难去关注这些基础知识。</p><p>OK，回到今天的问题，与AI协作巩固基础知识。</p><h2 id="CAP理论-一致性、可用性、分区容错性">CAP理论 (一致性、可用性、分区容错性)</h2><p>这时一个架构方面的问题，根据不同的业务场景，你要去怎么设计你的程序代码？</p><h3 id="一、CAP理论的三个特性">一、CAP理论的三个特性</h3><ol><li>‌**一致性（Consistency）**‌：<ul><li>在分布式系统中，若多节点同时操作同一数据，所有节点最终应得到一致的结果。</li><li>强一致性指所有节点数据状态同时相同，但在分布式系统中实现强一致性较为困难，因此有时会采用最终一致性作为折中方案。</li></ul></li><li>‌**可用性（Availability）**‌：<ul><li>分布式系统需确保无论何种故障，用户请求都能在有限时间内得到响应，系统不能拒绝服务或长时间无响应。</li></ul></li><li>‌**分区容错性（Partition Tolerance）**‌：<ul><li>分布式系统可能因网络、硬件故障等原因被分割成多个独立区域，分区容错性要求系统在此情况下仍能提供服务。</li></ul></li></ol><h3 id="二、CAP理论的核心思想">二、CAP理论的核心思想</h3><p>CAP理论的核心思想是，在分布式系统中，由于网络分区和节点故障是不可避免的，而保证一致性和可用性需要对网络分区做出不同的权衡，因此分布式系统最多只能同时满足一致性、可用性和分区容错性这三个特性中的两个。</p><h3 id="三、CAP理论的权衡与取舍">三、CAP理论的权衡与取舍</h3><p>在设计分布式系统时，需要根据具体的应用场景和需求，在CAP三个特性之间进行权衡和取舍。以下是一些常见的权衡方案：</p><ul><li>‌**CA（一致性+可用性）**‌：<ul><li>牺牲分区容错性。</li><li>适用于对一致性和可用性要求高，但对分区容错性要求不高的场景。</li><li>例如，传统的单节点数据库（如MySQL单机模式）在发生网络分区时会选择停止服务，以保证一致性和可用性。</li></ul></li><li>‌**CP（一致性+分区容错性）**‌：<ul><li>牺牲可用性。</li><li>适用于对一致性要求高，可容忍系统一定程度上不可用的场景。</li><li>例如，金融交易系统为了保证数据的一致性，可能会在网络分区时暂停服务，直到网络恢复并同步数据。</li></ul></li><li>‌**AP（可用性+分区容错性）**‌：<ul><li>牺牲一致性。</li><li>适用于对高可用性要求高，而一致性要求较低的场景。</li><li>例如，社交媒体和缓存系统通常会优先保证系统的可用性和分区容错性，而允许在短时间内出现数据不一致的情况。</li></ul></li></ul><h3 id="四、实际应用例子">四、实际应用例子</h3><ul><li><p>‌<strong>银行系统</strong>‌：</p><ul><li>银行系统对数据的一致性要求非常高，因为错误的交易数据可能会导致严重的财务问题。</li><li>因此，银行系统可能会选择CP组合，牺牲一定的可用性来保证数据的一致性。</li></ul></li><li><p>‌<strong>互联网服务</strong>‌：</p><ul><li>互联网服务对系统的可用性要求非常高，因为用户期望能够随时随地访问服务。</li><li>因此，互联网服务可能会选择AP组合，牺牲一定的数据一致性来保证系统的高可用性和分区容错性。例如，社交媒体平台在面临网络分区时可能会继续提供服务，即使这意味着用户可能会看到稍微过时的数据。</li></ul><h2 id="ConcurrentHashMap的分段锁和CAS有什么区别">ConcurrentHashMap的分段锁和CAS有什么区别</h2><p>在Java并发编程中，<code>ConcurrentHashMap</code>是一个非常重要的线程安全的哈希表实现。为了优化并发性能，<code>ConcurrentHashMap</code>在不同版本中采用了不同的技术，其中包括分段锁和CAS（Compare-And-Swap）操作。以下是这两种技术的详细解释和它们之间的区别：</p><h3 id="分段锁（Segment-Locking）">分段锁（Segment Locking）</h3><p>‌<strong>定义与应用</strong>‌：</p><ul><li>分段锁是<code>ConcurrentHashMap</code>在Java 7及之前版本中使用的一种锁机制。</li><li>它将整个哈希表分为多个段（Segment），每个段相当于一个小的哈希表，并独立进行锁定操作。</li><li>这样，多个线程可以同时访问不同的段，而不会发生冲突，从而极大地提高了并发性能。</li></ul><p>‌<strong>工作原理</strong>‌：</p><ul><li><code>ConcurrentHashMap</code>内部维护一个<code>Segment</code>数组，每个<code>Segment</code>都实现了<code>ReentrantLock</code>接口，用于获取锁。</li><li>当需要插入或更新元素时，会根据键的哈希值判断它属于哪个段，然后对该段进行加锁操作。</li><li>如果多个线程尝试访问同一个段，则只有一个线程能够获取锁，其他线程会等待或重新尝试。</li></ul><p>‌<strong>优势</strong>‌：</p><ul><li>通过细化锁的粒度，分段锁允许更多的并发访问，特别是在读操作多于写操作的场景中。</li></ul><h3 id="CAS（Compare-And-Swap）">CAS（Compare-And-Swap）</h3><p>‌<strong>定义与应用</strong>‌：</p><ul><li>CAS是一种无锁的原子操作，用于确保多线程环境下的数据一致性。</li><li>在Java 8及之后的版本中，<code>ConcurrentHashMap</code>采用了更细粒度的锁和CAS操作，以进一步提高并发性能。</li></ul><p>‌<strong>工作原理</strong>‌：</p><ul><li>CAS操作包含三个操作数：内存值V、预期值A和新值B。</li><li>操作过程是将内存值V与预期值A进行比较，如果相等，则将内存值V更新为新值B，并返回操作是否成功的结果。</li><li>如果不相等，则说明有其他线程已经修改了该值，此时当前线程会重新尝试CAS操作。</li></ul><p>‌<strong>在<code>ConcurrentHashMap</code>中的应用</strong>‌：</p><ul><li>当需要对某个节点进行更新操作时，<code>ConcurrentHashMap</code>会使用CAS操作来保证线程安全。</li><li>例如，在插入新元素时，会先尝试使用CAS操作更新节点的值，如果成功，则完成插入；如果失败，则说明有其他线程已经修改了该节点，此时会重新尝试插入或采取其他措施。</li></ul><p>‌<strong>优势</strong>‌：</p><ul><li>CAS操作是一种非阻塞的并发控制方式，避免了锁的竞争和阻塞，从而提高了并发性能。</li><li>它适用于简单的变量更新操作，并且可以在不使用锁的情况下保证数据的一致性。</li></ul><h3 id="区别与总结">区别与总结</h3><ul><li>‌<strong>锁机制不同</strong>‌：分段锁是通过将哈希表分为多个段并独立锁定来提高并发性能的；而CAS是一种无锁的原子操作，通过比较并交换内存值来实现数据一致性。</li><li>‌<strong>适用场景不同</strong>‌：分段锁更适合于读操作多于写操作的场景；而CAS更适用于简单的变量更新操作和高并发环境。</li><li>‌<strong>在<code>ConcurrentHashMap</code>中的演变</strong>‌：在Java 7及之前版本中，<code>ConcurrentHashMap</code>主要使用分段锁机制；而在Java 8及之后版本中，则采用了更细粒度的锁和CAS操作来进一步提高并发性能。</li></ul><p>综上所述，分段锁和CAS都是<code>ConcurrentHashMap</code>中用于优化并发性能的重要技术。它们在不同的应用场景下发挥着各自的优势，共同为Java并发编程提供了高效、线程安全的哈希表实现。</p></li></ul><h2 id="JAVA的锁机制">JAVA的锁机制</h2><h3 id="1-公平锁与非公平锁">1. 公平锁与非公平锁</h3><ul><li>‌<strong>公平锁</strong>‌：指多个线程按照申请锁的顺序来获取锁，类似于日常的排队。这种锁保证了线程获取锁的公平性，避免了线程饥饿问题。</li><li>‌<strong>非公平锁</strong>‌：多个线程获取锁的顺序并不是按照申请锁的顺序来，通俗来说就是插队。非公平锁的性能通常比公平锁更高，因为它减少了线程切换和上下文切换的开销。但可能会导致某些线程长时间等待而无法获取锁。</li></ul><h3 id="2-可重入锁（ReentrantLock）">2. 可重入锁（ReentrantLock）</h3><ul><li>‌<strong>定义</strong>‌：可重入锁是一种允许同一个线程多次获取锁的锁机制。</li><li>‌特点‌：<ul><li>支持手动释放锁，通常使用try-finally结构来确保锁最终被释放。</li><li>可以创建公平锁和非公平锁。</li><li>支持可中断的锁请求和锁尝试机制。</li></ul></li><li>‌<strong>适用场景</strong>‌：适用于需要多次获取锁的递归调用场景。</li></ul><h3 id="3-自旋锁">3. 自旋锁</h3><ul><li>‌<strong>定义</strong>‌：自旋锁是一种尝试获取锁的循环方式，不会使线程阻塞。当线程尝试获取锁失败时，它会不断循环尝试获取锁，直到成功为止。</li><li>‌特点‌：<ul><li>减少了线程上下文切换的开销，但在长时间自旋时会浪费CPU资源。</li><li>适用于锁持有时间较短的场景。</li></ul></li><li>‌<strong>适用场景</strong>‌：适用于多处理器系统中，且锁持有时间较短的场景。</li></ul><h3 id="4-共享锁与独占锁">4. 共享锁与独占锁</h3><ul><li>‌**共享锁（读锁）**‌：允许多个线程同时读取共享资源，但不允许修改。这种锁适用于读多写少的场景，可以提高并发性能。</li><li>‌**独占锁（写锁）**‌：在一个线程写数据时，不允许其他线程读或写。这种锁保证了数据的一致性和完整性。</li></ul><h3 id="5-StampedLock">5. StampedLock</h3><ul><li>‌<strong>定义</strong>‌：StampedLock是ReadWriteLock的改进版，主要用于高性能的读多写少场景。它引入了一个称为“戳”的概念，可以在读操作中乐观地获取锁。</li><li>‌特点‌：<ul><li>乐观读锁不会阻止写操作，可以提升读操作的性能。</li><li>悲观读锁和写锁类似于ReentrantReadWriteLock中的锁。</li></ul></li><li>‌<strong>适用场景</strong>‌：适用于读多写少且对读性能要求较高的场景。</li></ul><h3 id="区别与联系">区别与联系</h3><ul><li>‌<strong>公平锁与非公平锁</strong>‌：主要区别在于线程获取锁的顺序。公平锁保证了线程获取锁的公平性，但性能较低；非公平锁性能较高，但可能导致线程饥饿。</li><li>‌<strong>可重入锁与自旋锁</strong>‌：可重入锁允许同一个线程多次获取锁，而自旋锁则是一种尝试获取锁的循环方式。两者可以结合使用，例如在可重入锁的实现中加入自旋机制以提高性能。</li><li>‌<strong>共享锁与独占锁</strong>‌：共享锁允许多个线程同时读取共享资源，而独占锁则不允许其他线程在写数据时读或写。两者通常用于读写分离的场景中以提高并发性能。</li></ul><p>综上所述，Java中的锁机制种类繁多，各有特点和适用场景。在选择锁机制时需要根据具体的应用场景和需求进行权衡和选择。</p><h3 id="Java中各种锁机制的简单代码">Java中各种锁机制的简单代码</h3><p>这些示例展示了每种锁机制的核心用法和特性。</p><h3 id="1-公平锁与非公平锁-2">1. 公平锁与非公平锁</h3><p>Java中的<code>ReentrantLock</code>类支持创建公平锁和非公平锁。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairAndNonFairLockExample</span> {<br>    <span class="hljs-comment">// 公平锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">fairLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// 非公平锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">nonFairLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">fairTask</span> <span class="hljs-operator">=</span> () -&gt; {<br>            fairLock.lock();<br>            <span class="hljs-keyword">try</span> {<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 获取了公平锁"</span>);<br>            } <span class="hljs-keyword">finally</span> {<br>                fairLock.unlock();<br>            }<br>        };<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">nonFairTask</span> <span class="hljs-operator">=</span> () -&gt; {<br>            nonFairLock.lock();<br>            <span class="hljs-keyword">try</span> {<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 获取了非公平锁"</span>);<br>            } <span class="hljs-keyword">finally</span> {<br>                nonFairLock.unlock();<br>            }<br>        };<br><br>        <span class="hljs-comment">// 创建线程并启动</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(fairTask, <span class="hljs-string">"线程1"</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(fairTask, <span class="hljs-string">"线程2"</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(nonFairTask, <span class="hljs-string">"线程3"</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(nonFairTask, <span class="hljs-string">"线程4"</span>);<br><br>        thread1.start();<br>        thread2.start();<br>        thread3.start();<br>        thread4.start();<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="2-可重入锁（ReentrantLock）-2">2. 可重入锁（ReentrantLock）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLockExample</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> () -&gt; {<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> {<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 获取了锁"</span>);<br>                <span class="hljs-comment">// 递归调用</span><br>                someMethod();<br>            } <span class="hljs-keyword">finally</span> {<br>                lock.unlock();<br>            }<br>        };<br><br>        <span class="hljs-comment">// 创建线程并启动</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task, <span class="hljs-string">"线程1"</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task, <span class="hljs-string">"线程2"</span>);<br><br>        thread1.start();<br>        thread2.start();<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> {<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> {<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 再次获取了锁（递归调用）"</span>);<br>        } <span class="hljs-keyword">finally</span> {<br>            lock.unlock();<br>        }<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="3-自旋锁-2">3. 自旋锁</h3><p>Java标准库中没有直接提供自旋锁的实现，但我们可以自己实现一个简单的版本。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpinLock</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isLocked</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">while</span> (isLocked) {<br>            <span class="hljs-comment">// 自旋等待</span><br>        }<br>        isLocked = <span class="hljs-literal">true</span>;<br>    }<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> {<br>        isLocked = <span class="hljs-literal">false</span>;<br>    }<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">SpinLock</span> <span class="hljs-variable">spinLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpinLock</span>();<br>    <br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> () -&gt; {<br>            spinLock.lock();<br>            <span class="hljs-keyword">try</span> {<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 获取了自旋锁"</span>);<br>            } <span class="hljs-keyword">finally</span> {<br>                spinLock.unlock();<br>            }<br>        };<br>    <br>        <span class="hljs-comment">// 创建线程并启动</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task, <span class="hljs-string">"线程1"</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task, <span class="hljs-string">"线程2"</span>);<br>    <br>        thread1.start();<br>        thread2.start();<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="4-共享锁与独占锁-2">4. 共享锁与独占锁</h3><p>Java中的<code>ReentrantReadWriteLock</code>类提供了共享锁（读锁）和独占锁（写锁）。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLockExample</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">rwLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">readTask</span> <span class="hljs-operator">=</span> () -&gt; {<br>            rwLock.readLock().lock();<br>            <span class="hljs-keyword">try</span> {<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 获取了读锁"</span>);<br>            } <span class="hljs-keyword">finally</span> {<br>                rwLock.readLock().unlock();<br>            }<br>        };<br>    <br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">writeTask</span> <span class="hljs-operator">=</span> () -&gt; {<br>            rwLock.writeLock().lock();<br>            <span class="hljs-keyword">try</span> {<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 获取了写锁"</span>);<br>            } <span class="hljs-keyword">finally</span> {<br>                rwLock.writeLock().unlock();<br>            }<br>        };<br>    <br>        <span class="hljs-comment">// 创建线程并启动</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(readTask, <span class="hljs-string">"线程1"</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(readTask, <span class="hljs-string">"线程2"</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(writeTask, <span class="hljs-string">"线程3"</span>);<br>    <br>        thread1.start();<br>        thread2.start();<br>        thread3.start();<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="5-StampedLock-2">5. StampedLock</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.StampedLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StampedLockExample</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StampedLock</span> <span class="hljs-variable">stampedLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StampedLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">readTask</span> <span class="hljs-operator">=</span> () -&gt; {<br>            <span class="hljs-type">long</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> stampedLock.tryOptimisticReadLock();<br>            <span class="hljs-keyword">try</span> {<br>                <span class="hljs-comment">// 乐观读锁尝试获取数据</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 尝试获取乐观读锁"</span>);<br>                <span class="hljs-comment">// 验证锁的有效性</span><br>                <span class="hljs-keyword">if</span> (!stampedLock.validate(stamp)) {<br>                    stamp = stampedLock.readLock();<br>                    <span class="hljs-keyword">try</span> {<br>                        <span class="hljs-comment">// 获取悲观读锁</span><br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 获取了悲观读锁"</span>);<br>                    } <span class="hljs-keyword">finally</span> {<br>                        stampedLock.unlockRead(stamp);<br>                    }<br>                }<br>            } <span class="hljs-keyword">finally</span> {<br>                <span class="hljs-comment">// 乐观锁不需要显式解锁</span><br>            }<br>        };<br>    <br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">writeTask</span> <span class="hljs-operator">=</span> () -&gt; {<br>            <span class="hljs-type">long</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> stampedLock.writeLock();<br>            <span class="hljs-keyword">try</span> {<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" 获取了写锁"</span>);<br>            } <span class="hljs-keyword">finally</span> {<br>                stampedLock.unlockWrite(stamp);<br>            }<br>        };<br>    <br>        <span class="hljs-comment">// 创建线程并启动</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(readTask, <span class="hljs-string">"线程1"</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(writeTask, <span class="hljs-string">"线程2"</span>);<br>    <br>        thread1.start();<br>        thread2.start();<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Java线程池">Java线程池</h2><h3 id="线程池的各个参数">线程池的各个参数</h3><p><font color="red"><strong>核心线程数、最大线程数、线程存活时间、单位、线程工厂、线程队列、线程拒绝handler。</strong></font></p><p>线程池在Java中主要通过<code>java.util.concurrent.Executors</code>工厂类来创建，也可以通过<code>ThreadPoolExecutor</code>构造函数来创建。以下是线程池的主要参数及其解释：</p><ol><li>‌**corePoolSize（核心线程数）**‌：<ul><li>线程池中的核心线程数，即使线程处于空闲状态，线程池也会保留核心线程数。只有当工作队列满时，才会创建超出核心线程数的线程。</li></ul></li><li>‌**maximumPoolSize（最大线程数）**‌：<ul><li>线程池中允许的最大线程数。当工作队列满且已创建的线程数小于最大线程数时，线程池会尝试创建新的线程来处理任务。</li></ul></li><li>‌**keepAliveTime（线程空闲时间）**‌：<ul><li>当线程数超过核心线程数时，这是多余空闲线程在终止前等待新任务的最长时间。</li></ul></li><li>‌**unit（时间单位）**‌：<ul><li><code>keepAliveTime</code>参数的时间单位，常用的有<code>TimeUnit.MILLISECONDS</code>、<code>TimeUnit.SECONDS</code>等。</li></ul></li><li>‌**workQueue（工作队列）**‌：<ul><li>用于保存等待执行的任务的阻塞队列。常见的队列类型有<code>LinkedBlockingQueue</code>（基于链表的阻塞队列）、<code>ArrayBlockingQueue</code>（基于数组的阻塞队列）、<code>SynchronousQueue</code>（一个不存储元素的阻塞队列，每个插入操作必须等待另一个线程的对应移除操作）等。</li></ul></li><li>‌**threadFactory（线程工厂）**‌：<ul><li>用于创建新线程的工厂。如果没有指定，则使用<code>Executors.defaultThreadFactory()</code>来创建线程。</li></ul></li><li>‌**handler（拒绝执行处理器）**‌：<ul><li>当线程池和工作队列都满了时，用于处理被拒绝的任务的处理器。常见的拒绝策略有<code>AbortPolicy</code>（抛出<code>RejectedExecutionException</code>）、<code>CallerRunsPolicy</code>（在调用者的线程中运行被拒绝的任务）、<code>DiscardPolicy</code>（丢弃被拒绝的任务）和<code>DiscardOldestPolicy</code>（丢弃最早的未处理的任务）等。</li></ul></li></ol><h2 id="Java数据结构">Java数据结构</h2><h3 id="线性结构">线性结构</h3><h3 id="1-数组（Array）">1. 数组（Array）</h3><p>‌<strong>特点</strong>‌：</p><ul><li>固定大小的数据结构，用于存储相同类型的元素。</li><li>访问速度快，但插入和删除操作效率较低（需要移动元素）。</li></ul><p>‌<strong>用途</strong>‌：</p><ul><li>存储固定大小的集合。</li><li>用于实现静态数据结构，如栈和队列的底层实现。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>array[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>array[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></tbody></table></figure><h3 id="2-链表（LinkedList）">2. 链表（LinkedList）</h3><p>‌<strong>特点</strong>‌：</p><ul><li>由一系列节点组成，每个节点包含数据和指向下一个节点的引用。</li><li>支持快速的插入和删除操作，但访问速度较慢（需要从头节点开始遍历）。</li></ul><p>‌<strong>用途</strong>‌：</p><ul><li>实现动态数据结构，如动态数组、栈、队列和哈希表。</li><li>用于表示具有顺序关系的元素集合。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></tbody></table></figure><h3 id="3-栈（Stack）">3. 栈（Stack）</h3><p>‌<strong>特点</strong>‌：</p><ul><li>后进先出（LIFO）的数据结构。</li><li>支持快速的插入（压栈）和删除（弹栈）操作。</li></ul><p>‌<strong>用途</strong>‌：</p><ul><li>实现表达式求值、语法解析和递归调用等功能。</li><li>用于保存临时数据。</li></ul><p>‌<strong>示例代码</strong>‌（使用Java内置的<code>Stack</code>类）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>stack.push(<span class="hljs-number">1</span>);<br>stack.push(<span class="hljs-number">2</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> stack.pop();<br></code></pre></td></tr></tbody></table></figure><h3 id="4-队列（Queue）">4. 队列（Queue）</h3><p>‌<strong>特点</strong>‌：</p><ul><li>先进先出（FIFO）的数据结构。</li><li>支持快速的插入（入队）和删除（出队）操作。</li></ul><p>‌<strong>用途</strong>‌：</p><ul><li>实现任务调度、消息传递和广度优先搜索等功能。</li><li>用于保存待处理的任务或事件。</li></ul><p>‌<strong>示例代码</strong>‌（使用Java内置的<code>LinkedList</code>作为队列）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedList&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>queue.add(<span class="hljs-number">1</span>);<br>queue.add(<span class="hljs-number">2</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> queue.poll();<br></code></pre></td></tr></tbody></table></figure><h3 id="非线性结构">非线性结构</h3><h3 id="5-树（Tree）">5. 树（Tree）</h3><p>‌<strong>特点</strong>‌：</p><ul><li>具有层次结构的数据结构，每个节点可以包含子节点。</li><li>支持快速的查找、插入和删除操作（取决于树的类型，如二叉搜索树、平衡树等）。</li></ul><p>‌<strong>用途</strong>‌：</p><ul><li>实现文件系统、数据库索引和表达式树等功能。</li><li>用于表示具有层次关系的数据集合。</li></ul><p>‌<strong>示例代码</strong>‌（以二叉搜索树为例，使用自定义类实现）：</p><figure class="highlight perl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>{<br>    <span class="hljs-keyword">int</span> val;<br>    TreeNode left;<br>    TreeNode right;<br>    <span class="hljs-regexp">//</span> 构造函数、getter和setter方法<br>}<br><br>// 插入、查找和删除操作的实现...<br></code></pre></td></tr></tbody></table></figure><h3 id="6-哈希表">6.哈希表</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTable</span>&lt;K, V&gt; {<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">private</span> List&lt;LinkedList&lt;Entry&lt;K, V&gt;&gt;&gt; table;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">// 哈希表条目类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K, V&gt; {<br>        K key;<br>        V value;<br><br>        Entry(K key, V value) {<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>        }<br>    }<br><br>    <span class="hljs-comment">// 构造函数，初始化哈希表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashTable</span><span class="hljs-params">()</span> {<br>        <span class="hljs-built_in">this</span>(DEFAULT_CAPACITY);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashTable</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> {<br>        table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>[capacity];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; capacity; i++) {<br>            table[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        }<br>        <span class="hljs-built_in">this</span>.size = <span class="hljs-number">0</span>;<br>    }<br><br>    <span class="hljs-comment">// 哈希函数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(K key)</span> {<br>        <span class="hljs-keyword">return</span> Math.abs(key.hashCode()) % table.length;<br>    }<br><br>    <span class="hljs-comment">// 插入键值对</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> hash(key);<br>        LinkedList&lt;Entry&lt;K, V&gt;&gt; bucket = table[index];<br><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; entry : bucket) {<br>            <span class="hljs-keyword">if</span> (entry.key.equals(key)) {<br>                entry.value = value; <span class="hljs-comment">// 如果键已存在，则更新值</span><br>                <span class="hljs-keyword">return</span>;<br>            }<br>        }<br><br>        bucket.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value));<br>        size++;<br>    }<br><br>    <span class="hljs-comment">// 删除键值对</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(K key)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> hash(key);<br>        LinkedList&lt;Entry&lt;K, V&gt;&gt; bucket = table[index];<br><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; entry : bucket) {<br>            <span class="hljs-keyword">if</span> (entry.key.equals(key)) {<br>                <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.value;<br>                bucket.remove(entry);<br>                size--;<br>                <span class="hljs-keyword">return</span> value;<br>            }<br>        }<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 如果键不存在，则返回null</span><br>    }<br><br>    <span class="hljs-comment">// 查找值</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> hash(key);<br>        LinkedList&lt;Entry&lt;K, V&gt;&gt; bucket = table[index];<br><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; entry : bucket) {<br>            <span class="hljs-keyword">if</span> (entry.key.equals(key)) {<br>                <span class="hljs-keyword">return</span> entry.value;<br>            }<br>        }<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 如果键不存在，则返回null</span><br>    }<br><br>    <span class="hljs-comment">// 打印哈希表中的所有键值对</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printTable</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; table.length; i++) {<br>            LinkedList&lt;Entry&lt;K, V&gt;&gt; bucket = table[i];<br>            System.out.println(<span class="hljs-string">"Bucket "</span> + i + <span class="hljs-string">": "</span> + bucket);<br>        }<br>    }<br><br>    <span class="hljs-comment">// 获取哈希表的大小</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> size;<br>    }<br><br>    <span class="hljs-comment">// 判断哈希表是否为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        HashTable&lt;String, Integer&gt; hashTable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashTable</span>&lt;&gt;();<br>        hashTable.put(<span class="hljs-string">"apple"</span>, <span class="hljs-number">1</span>);<br>        hashTable.put(<span class="hljs-string">"banana"</span>, <span class="hljs-number">2</span>);<br>        hashTable.put(<span class="hljs-string">"orange"</span>, <span class="hljs-number">3</span>);<br><br>        System.out.println(<span class="hljs-string">"Hash table elements: "</span>);<br>        hashTable.printTable();<br><br>        System.out.println(<span class="hljs-string">"Value for key 'banana': "</span> + hashTable.get(<span class="hljs-string">"banana"</span>));<br>        System.out.println(<span class="hljs-string">"Removed key 'apple', new hash table elements: "</span>);<br>        hashTable.remove(<span class="hljs-string">"apple"</span>);<br>        hashTable.printTable();<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="7-图（Graph）">7. 图（Graph）</h3><p>‌<strong>特点</strong>‌：</p><ul><li>由节点和边组成的数据结构，用于表示实体之间的关系。</li><li>支持复杂的遍历和搜索操作（如深度优先搜索、广度优先搜索等）。</li></ul><p>‌<strong>用途</strong>‌：</p><ul><li>实现社交网络、地图和电路图等功能。</li><li>用于表示具有复杂关系的数据集合。</li></ul><p>‌<strong>示例代码</strong>‌（使用自定义类实现）：</p><figure class="highlight perl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graph</span> </span>{<br>    private Map&lt;Integer, List&lt;Integer&gt;&gt; adjList;<br>    <span class="hljs-regexp">//</span> 构造函数、添加边和遍历方法<br>}<br><br>// 遍历、搜索和路径查找操作的实现...<br></code></pre></td></tr></tbody></table></figure><h3 id="8-堆">8.堆</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MaxHeap</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] heap;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br><br>    <span class="hljs-comment">// 构造函数，初始化最大堆</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MaxHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> {<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        <span class="hljs-built_in">this</span>.heap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[capacity];<br>        <span class="hljs-built_in">this</span>.size = <span class="hljs-number">0</span>;<br>    }<br>    <br>    <span class="hljs-comment">// 交换数组中的两个元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> heap[i];<br>        heap[i] = heap[j];<br>        heap[j] = temp;<br>    }<br>    <br>    <span class="hljs-comment">// 上移操作，维护最大堆性质</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapifyUp</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> {<br>        <span class="hljs-keyword">while</span> (index != <span class="hljs-number">0</span> &amp;&amp; heap[(index - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>] &lt; heap[index]) {<br>            swap((index - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>, index);<br>            index = (index - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        }<br>    }<br>    <br>    <span class="hljs-comment">// 下移操作，维护最大堆性质</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapifyDown</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">largest</span> <span class="hljs-operator">=</span> index;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>;<br>    <br>        <span class="hljs-keyword">if</span> (left &lt; size &amp;&amp; heap[left] &gt; heap[largest]) {<br>            largest = left;<br>        }<br>    <br>        <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp; heap[right] &gt; heap[largest]) {<br>            largest = right;<br>        }<br>    <br>        <span class="hljs-keyword">if</span> (largest != index) {<br>            swap(index, largest);<br>            heapifyDown(largest);<br>        }<br>    }<br>    <br>    <span class="hljs-comment">// 插入元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> element)</span> {<br>        <span class="hljs-keyword">if</span> (size == capacity) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">"Heap is full"</span>);<br>        }<br>    <br>        heap[size] = element;<br>        size++;<br>        heapifyUp(size - <span class="hljs-number">1</span>);<br>    }<br>    <br>    <span class="hljs-comment">// 删除并返回最大元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">extractMax</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">"Heap is empty"</span>);<br>        }<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> heap[<span class="hljs-number">0</span>];<br>        heap[<span class="hljs-number">0</span>] = heap[size - <span class="hljs-number">1</span>];<br>        size--;<br>        heapifyDown(<span class="hljs-number">0</span>);<br>    <br>        <span class="hljs-keyword">return</span> max;<br>    }<br>    <br>    <span class="hljs-comment">// 打印堆中的元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printHeap</span><span class="hljs-params">()</span> {<br>        System.out.println(Arrays.toString(Arrays.copyOfRange(heap, <span class="hljs-number">0</span>, size)));<br>    }<br>    <br>    <span class="hljs-comment">// 获取堆的大小</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> size;<br>    }<br>    <br>    <span class="hljs-comment">// 判断堆是否为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    }<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">MaxHeap</span> <span class="hljs-variable">maxHeap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MaxHeap</span>(<span class="hljs-number">10</span>);<br>        maxHeap.insert(<span class="hljs-number">10</span>);<br>        maxHeap.insert(<span class="hljs-number">20</span>);<br>        maxHeap.insert(<span class="hljs-number">5</span>);<br>        maxHeap.insert(<span class="hljs-number">30</span>);<br>        maxHeap.insert(<span class="hljs-number">15</span>);<br>    <br>        System.out.println(<span class="hljs-string">"Heap elements: "</span> + maxHeap.printHeap());<br>    <br>        System.out.println(<span class="hljs-string">"Extracted max: "</span> + maxHeap.extractMax());<br>        System.out.println(<span class="hljs-string">"Heap elements after extraction: "</span> + maxHeap.printHeap());<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="哈希冲突的原因">哈希冲突的原因</h3><p>哈希冲突的根本原因是哈希函数的设计不够好，导致计算得到的哈希值不够随机。具体来说，可能是由于哈希函数的设计不够均匀，或者散列函数的碰撞率较高，使得不同的键值计算出了相同的哈希值。</p><h3 id="哈希冲突的解决方法">哈希冲突的解决方法</h3><ol><li>‌**链地址法（链表法）**‌<ul><li>‌<strong>实现原理</strong>‌：当发生哈希冲突时，将冲突的元素存储在一个链表中。每个哈希桶中存储一个链表的头节点，当新的元素哈希到该桶中时，如果发生冲突，则将其添加到链表中。</li><li>‌<strong>特点</strong>‌：链地址法能够有效地解决哈希冲突问题，且实现相对简单。然而，当冲突较多时，链表的长度会增加，从而影响查找效率。</li></ul></li><li>‌<strong>开放地址法</strong>‌<ul><li>‌<strong>实现原理</strong>‌：当发生哈希冲突时，通过探测方式在散列表中寻找下一个可用的空槽来存储冲突的元素。常见的探测方式包括线性探测、二次探测和双重散列等。</li><li>‌<strong>特点</strong>‌：开放地址法不需要额外的存储空间来存储冲突的元素，但探测过程可能会增加查找和插入操作的时间复杂度。</li></ul></li><li>‌<strong>再哈希法</strong>‌<ul><li>‌<strong>实现原理</strong>‌：当发生哈希冲突时，使用另外一个哈希函数再次计算索引位置。如果计算出的索引位置仍然冲突，可以继续尝试使用其他哈希函数。</li><li>‌<strong>特点</strong>‌：再哈希法通过引入多个哈希函数来分散冲突的元素，但实现相对复杂，且需要额外的存储空间来存储多个哈希函数。</li></ul></li><li>‌<strong>建立公共溢出区</strong>‌<ul><li>‌<strong>实现原理</strong>‌：当发生哈希冲突时，将冲突的元素存储在一个公共的溢出区中。这个区域可以是链表、数组等数据结构。在查找元素时，先通过哈希函数计算索引位置，然后从溢出区中查找。</li><li>‌<strong>特点</strong>‌：建立公共溢出区的方法能够灵活地处理哈希冲突问题，但同样需要额外的存储空间来存储溢出区的元素。</li></ul></li></ol><h2 id="数据库">数据库</h2><h2 id="达梦数据库和oracle有什么区别">达梦数据库和oracle有什么区别</h2><p>达梦数据库（DM数据库）和Oracle数据库是两种不同的数据库管理系统，它们在多个方面存在显著的区别。以下是对两者主要差异的详细分析：</p><h3 id="一、体系结构">一、体系结构</h3><ul><li>Oracle数据库采用多进程架构，包括PMON、SMON、DBWR、LGWR、CKPT、ARCn等多个进程。</li><li>达梦数据库则采用单进程多线程架构，主进程是dmserver，包含checkpoint线程、I/O线程、监听线程、日志写线程等多个线程。</li></ul><h3 id="二、启动与状态转换">二、启动与状态转换</h3><ul><li>Oracle数据库可以从关闭状态经过nomount、mount到open状态。</li><li>达梦数据库的状态转换相对灵活，除了mount和suspend之间不能直接转化外，其余状态可以任意转换。</li></ul><h3 id="三、安全性">三、安全性</h3><ul><li>Oracle数据库提供了安全控制和审计功能，支持细粒度的权限管理，并通过Profile机制控制用户资源使用。</li><li>达梦数据库则采用参数PWD_POLICY管理密码策略，且在国密算法支持、国产化适配等方面有优势，符合国内安全合规要求。</li></ul><h3 id="四、表空间管理">四、表空间管理</h3><ul><li>在表空间管理上，两者都允许一个表空间包含多个数据文件，且一个数据文件只能属于一个表空间。但Oracle能对表空间或者数据文件进行offline操作，而达梦仅能对表空间进行offline。</li><li>在数据文件迁移方面，Oracle在12c以前需要手动在操作系统层进行迁移，并在数据库层更改路径参数；而达梦通过一个命令即可在操作系统层完成整体迁移。</li></ul><h3 id="五、用户与模式">五、用户与模式</h3><ul><li>Oracle数据库的用户和模式（schema）是一一对应关系。</li><li>达梦数据库则允许一个用户下拥有多个模式。</li></ul><h3 id="六、备份与恢复">六、备份与恢复</h3><ul><li>Oracle数据库的RMAN工具支持热备份，允许在数据库运行时进行备份。</li><li>达梦数据库的RMAN可能仅支持冷备份，需要数据库处于非活动状态。但请注意，达梦数据库在进行热备时需要额外的配置或操作。</li></ul><h3 id="七、表与索引">七、表与索引</h3><ul><li>Oracle数据库默认创建的是堆表。</li><li>达梦数据库默认创建的是索引组织表，这种表有且仅有一个聚簇索引键，表数据按照聚簇索引键排序。</li></ul><h3 id="八、SQL语法与管理工具">八、SQL语法与管理工具</h3><ul><li>两者在SQL语法上存在共通之处，但也存在一些差异。例如，在执行.sql脚本时，Oracle使用“@”符号，而达梦数据库使用“start”或者“`”符号。</li><li>管理工具方面，Oracle使用SQL*Plus作为命令行工具，而达梦数据库使用DISQL。</li></ul><h3 id="九、其他功能特性">九、其他功能特性</h3><ul><li>Oracle数据库以其出色的性能优化技术和大规模部署能力著称，提供了诸如并行查询、分区表、自动工作负载管理等功能。</li><li>达梦数据库则在对标Oracle的功能方面进行了优化和适配，如提供了DataWatch、DSC、DMHS等架构来对应Oracle的ADG、RAC、OGG等架构。</li></ul><h3 id="十、兼容性设置">十、兼容性设置</h3><ul><li>达梦数据库提供了与Oracle数据库的兼容性设置，如通过dm.ini配置文件中的相关参数来设置对Oracle日期格式的兼容性、PL/SQL异常处理中SQLCODE的错误码值一致性等。</li><li>这些兼容性设置有助于简化从Oracle迁移到达梦数据库的过程，降低迁移成本和风险。</li></ul><p>综上所述，达梦数据库和Oracle数据库在体系结构、启动与状态转换、安全性、表空间管理、用户与模式、备份与恢复、表与索引、SQL语法与管理工具以及其他功能特性等方面都存在显著的差异。用户在选择数据库时，应根据自身的业务需求和系统环境进行综合考虑。</p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>java锁机制</tag>
      
      <tag>java集合</tag>
      
      <tag>ConcurrentHashMap与CAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在本地机器上部署DeepSeek-R1大模型(实操版)</title>
    <link href="/2025/02/17/%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2DeepSeek-R1%E5%A4%A7%E6%A8%A1%E5%9E%8B-%E5%AE%9E%E6%93%8D%E7%89%88/"/>
    <url>/2025/02/17/%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2DeepSeek-R1%E5%A4%A7%E6%A8%A1%E5%9E%8B-%E5%AE%9E%E6%93%8D%E7%89%88/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h1>如何在本地机器上部署DeepSeek-R1大模型(实操版)</h1><p>众所周知，现在的 DeepSeek 如日中天，不管是App端还是PC端，下载量，使用量都飙升。</p><p><strong>接下来我就说说如何在本地部署DeepSeek-R1 大模型</strong></p><p><font color="red"><strong>不讲理论，直接实操，本地部署</strong></font></p><h2 id="一、应对服务器繁忙，请稍后再试，本地部署deepSeek-R1大模型">一、应对服务器繁忙，请稍后再试，本地部署deepSeek-R1大模型</h2><p><strong>深度求索</strong>公司的服务在高峰期的时候就会出现 <strong>以下几个关键字</strong></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217113938531.png" alt="image-20250217113938531"></p><p>在高峰期不想和别人一起挤算力，下面让我们来介绍，<strong>在本地PC端部署DeepSeek-R1大模型</strong></p><h3 id="一、通过在-硅基流动-注册账号、">一、通过在 <a href="https://cloud.siliconflow.cn/i/NhsEfFdD">硅基流动</a> 注册账号、</h3><h3 id="【邀请码】-NhsEfFdD">【邀请码】 NhsEfFdD</h3><p>以下邀请码 <font color="red"><code>NhsEfFdD</code></font>&gt; ，邀请码虽然说是选填，但是填了之后新用户和老用户都会获得2000万的 Tokens，属于是不填白不填。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217114507275.png" alt="image-20250217114507275"></p><p>OK，接下来注册好账号之后，需要去在本地下载一个软件</p><h3 id="二、CherryStudio-AI助手-点击下载客户端">二、<a href="https://www.cherry-ai.com/">CherryStudio</a> AI助手 点击<a href="https://www.cherry-ai.com/download">下载客户端</a></h3><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217114858973.png" alt="image-20250217114858973"></p><p>点击 <strong><a href="https://objects.githubusercontent.com/github-production-release-asset-2e65be/805155266/3050726a-3b8b-40cc-b9a6-9e5c2cced40a?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=releaseassetproduction%2F20250217%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20250217T042911Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=68741477fe7f4813bdf47e878b838cb43f6fdbaeecb6c2af76a2a88012435853&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=attachment%3B%20filename%3DCherry-Studio-0.9.24-setup.exe&amp;response-content-type=application%2Foctet-stream">立即下载</a></strong></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217114958854.png" alt="image-20250217114958854"></p><p>温馨提示：这里如果有网络不好的同学，可以做如下操作：</p><h3 id="三、复制下载连接，迅雷快速下载">三、复制下载连接，迅雷快速下载</h3><p>点击箭头处复制链接，使用迅雷下载：</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217115056672.png" alt="image-20250217115056672"></p><p><strong>以下是迅雷的下载速度，可以做一下对比！</strong></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217115155458.png" alt="image-20250217115155458"></p><p><strong>下载完成之后，点击安装，安装过程不做过多赘述。</strong></p><h2 id="二、模型信息配置">二、模型信息配置</h2><p>安装完成后会出现以下界面，需要配置一些信息</p><p>点击小齿轮配置信息，应用商选择 硅基流动。</p><p>此时，如果有默认的 deepseek-R1大模型，则无需添加。</p><h3 id="1、登录硅基流动，API密钥，API地址自动关联">1、登录硅基流动，API密钥，API地址自动关联</h3><p><font color="red">API密钥和API地址会让你登录硅基流动的账号关联上，无需人工添加。</font></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217115614410.png" alt="image-20250217115614410"></p><h3 id="2、添加DeepSeek-R1模型，已有可跳过">2、添加DeepSeek-R1模型，已有可跳过</h3><p>如果没有则需要 添加 deepseek-R1 大模型</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217115727620.png" alt="image-20250217115727620"></p><h3 id="3、选择模型">3、选择模型</h3><p>回到硅基流动的页面，选择模型广场------&gt;点击deepseek-R1 大模型</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217115857483.png" alt="image-20250217115857483"></p><h4 id="复制模型文本">- 复制模型文本</h4><p>单击复制按钮</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217115928574.png" alt="image-20250217115928574"></p><h4 id="添加模型">- 添加模型</h4><p>将复制的信息输入到CherryStudio 添加模型的选项框中，点击添加模型 即可。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217120033075.png" alt="image-20250217120033075"></p><h4 id="验证模型是否正常">- 验证模型是否正常</h4><p>验证项：点击检查，选择本次主题对应的 DeepSeek-R1 大模型，如没有弹出错误信息则一切正常。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217120126861.png" alt="image-20250217120126861"></p><h2 id="三、选择模型，开启与DeepSeek-R1对话">三、选择模型，开启与DeepSeek-R1对话</h2><p>接下来就可以点击左侧导航栏 对话助手的图标，在下方输入你的问题，deepSeek-R1 模型就会回答你的问题了。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217120540059.png" alt="image-20250217120540059"></p><h3 id="提示：上方选择栏需要选择-DeepSeek-R1大模型才有深度思考">提示：上方选择栏需要选择 DeepSeek-R1大模型才有深度思考</h3><p>关键的一点：<strong>上方的模型选项 需要选择 DeepSeek-R1模型，这是深度思考的，V3版本是没有深度思考的。</strong></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217120730789.png" alt="image-20250217120730789"></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217120851147.png" alt="image-20250217120851147"></p><p><font color="red"><strong>最后，谢谢观看，希望本篇文章能帮到你！</strong></font></p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>DeepSeek</tag>
      
      <tag>本地部署</tag>
      
      <tag>硅基流动</tag>
      
      <tag>CherryStudio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于阿里云OSS本地存储套餐，创建Bucket选择同城存储引发欠费问题解决办法</title>
    <link href="/2025/02/17/%E5%85%B3%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%A5%97%E9%A4%90%EF%BC%8C%E5%88%9B%E5%BB%BABucket%E9%80%89%E6%8B%A9%E5%90%8C%E5%9F%8E%E5%AD%98%E5%82%A8%E5%BC%95%E5%8F%91%E6%AC%A0%E8%B4%B9%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2025/02/17/%E5%85%B3%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%A5%97%E9%A4%90%EF%BC%8C%E5%88%9B%E5%BB%BABucket%E9%80%89%E6%8B%A9%E5%90%8C%E5%9F%8E%E5%AD%98%E5%82%A8%E5%BC%95%E5%8F%91%E6%AC%A0%E8%B4%B9%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h1>关于阿里云OSS本地存储套餐，创建Bucket选择同城存储引发欠费问题解决办法</h1><p><strong>原文</strong></p><p>前文回顾： <a href="https://zpqwe.github.io/2025/02/15/%E5%85%B3%E4%BA%8ETypora-md%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0CSDN%E5%9B%BE%E7%89%87%E4%BC%9A%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/">关于Typora-md文件上传CSDN图片会失效问题</a>，中间出了一次问题，导致了服务不可用，图片无法展示的情况。</p><h2 id="场景还原：">场景还原：</h2><h3 id="1、选择存储套餐时是购买了标准-本地存储">1、选择存储套餐时是购买了标准-本地存储</h3><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215101528397.png" alt="img"></p><h3 id="2、当我创建Bucket时，却尴尬的选择了同城冗余存储">2、当我创建Bucket时，却尴尬的选择了同城冗余存储.</h3><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215102434885.png" alt="img"></p><p>于是，在晚上的时候，我突然发现，我的文章图片不显示了。由此做个记录！</p><p>当问题发生的时候，我第一想法就是联系客服，想咨询是什么情况导致。</p><p>当时我可能认为是不是会有乱扣费现象，或者是说我选择了什么东西导致发生了欠费现象。</p><h2 id="问题处理">问题处理</h2><h3 id="咨询客服">咨询客服</h3><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217103716515.png" alt="image-20250217103716515"></p><p>但是其实问客服不是一个很好的办法，我的想法是这样：客服每天要处理的事情很多，处理你的问题会不及时，导致你的时间损耗，如果说真的是一次生产层面的服务，就会导致处理的很慢。</p><p>所以，这里我推荐的是<strong>提工单</strong>，阿里云服务内部肯定也是有绩效考核的，工单肯定也在其中的一部分，我提工单具象化的把对方的处理的事情做留痕，并且我这边也会有一个判断，由此来阿里云的问题处理得及不及时。</p><h3 id="提交工单">提交工单</h3><p><strong>工单由此进入</strong></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217104428395.png" alt="image-20250217104428395"></p><p><font color="red">当你提交工单，把问题描述好以后，阿里云的售后服务就会根据你的问题委派工程师来处理</font></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217104659206.png" alt="image-20250217104659206"></p><p>当时我是在一个客户的角度上咨询问题，欠费导致的服务停止让我的内心有点焦急。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217104921577.png" alt="image-20250217104921577"></p><p>后续售后工程师根据我当前的问题(<font color="red"><strong>创建Bucket时本地冗余，选择了同城冗余，出现了套餐不一致，直接走的流量扣分的情况</strong></font>)，提供了解决方案:</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217110612899.png" alt="image-20250217110612899"></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217105350365.png" alt="image-20250217105350365"></p><p><strong>通过工程师的细心解答，问题也得以解决</strong>，可能会有人说，欠费你不是缴费问题就解决了吗?</p><p>但是在实际的应用场景中，这个付费是公司付费的，且你并不会个人去缴费，而且你的上司/老板也会疑问为什么会出现这个问题？</p><p>这些都是需要你去从服务商那里去得到问题，然后与对方把问题处理好。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217105740928.png" alt="image-20250217105740928"></p><h3 id="知识小Tips">知识小Tips</h3><p>工程师建议，读写权限最好改成私有</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217110133814.png" alt="image-20250217110133814"></p><p>Bucket授权策略可以替代公共读</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217111625705.png" alt="image-20250217111625705"></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250217110218324.png" alt="image-20250217110218324"></p><p><font color="red"><strong>最后，感谢您观看，希望这篇例子可以帮到你！</strong></font></p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>OSS本地存储套餐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DockerFile优化镜像体积</title>
    <link href="/2025/02/15/DockerFile%E4%BC%98%E5%8C%96%E9%95%9C%E5%83%8F%E4%BD%93%E7%A7%AF/"/>
    <url>/2025/02/15/DockerFile%E4%BC%98%E5%8C%96%E9%95%9C%E5%83%8F%E4%BD%93%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p><a href="https://zpqwe.github.io/2025/02/15/DockerFile%E4%BC%98%E5%8C%96%E9%95%9C%E5%83%8F%E4%BD%93%E7%A7%AF/">原文</a></p><h1>DockerFile优化镜像体积</h1><h2 id="前文回顾：">前文回顾：</h2><p>与昨天，也就是<a href="https://zpqwe.github.io/2025/02/14/DockerFile%E6%9E%84%E5%BB%BASpringBoot%E9%95%9C%E5%83%8F/">上一篇文章</a>的镜像大小做一个对比</p><p>可以看到，镜像大小为729MB，很庞大，明明是一个新构建的Springboot项目，怎么会这么大呢？</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215154808088.png" alt="image-20250215154808088"></p><p>排查发现，这是由于基础镜像的体积太大了，所以导致构建的时候体积也非常大。</p><h2 id="一、细数优化镜像体积的思路与方式">一、细数优化镜像体积的思路与方式</h2><p>1、尽可能选择轻量级基础镜像<br>2、优化镜像层缓存 (经常变动的命令放在后面构建，命令从上往下执行，这样前面的命令就会经过缓存)<br>3、尽可能减少层数<br>4/分阶段构建<br>5、尽量将Dockerfile相关文件放在同一目录</p><p>好的，那么我们的问题就是由于第一个点引起，<strong>基础镜像太大</strong></p><h2 id="二、优化Dockfile文件">二、<strong>优化Dockfile文件</strong></h2><p>创建一个 Dockerfile2</p><p><code>touch Dockerfile2</code></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215155554182.png" alt="image-20250215155554182"></p><p><code>vi Dockerfile2</code></p><h3 id="编辑-Dockerfile2文件">编辑 Dockerfile2文件</h3><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 使用OpenJDK 8的JRE镜像作为基础镜像</span><br><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jre-alpine<br><br><span class="hljs-comment"># 设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /home/root123</span><br><br><span class="hljs-comment"># 将宿主机上已经打包好的jar包复制到容器的/app目录下</span><br><span class="hljs-comment"># 假设你的jar包名称为my-app.jar，你需要根据实际情况修改这里的文件名</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./demo-0.0.1-SNAPSHOT.jar /home/root123</span><br><br><span class="hljs-comment"># 声明容器在运行时将监听的端口，这里假设你的应用运行在8080端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><br><span class="hljs-comment"># 设置容器启动时执行的命令，使用java -jar命令来运行jar包</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">"java"</span>, <span class="hljs-string">"-jar"</span>, <span class="hljs-string">"/home/root123/demo-0.0.1-SNAPSHOT.jar"</span>]</span><br><br></code></pre></td></tr></tbody></table></figure><p>通过Dockerfile2 这个文件再构建一次Springboot应用,输入命令，执行成功。</p><p><strong><font color="red">温馨提示</font></strong>：本篇文章需要结合上篇文章<a href="https://zpqwe.github.io/2025/02/14/DockerFile%E6%9E%84%E5%BB%BASpringBoot%E9%95%9C%E5%83%8F/">DockerFile构建SpringBoot镜像</a>看效果更好</p><h2 id="三、构建镜像">三、构建镜像</h2><p><code>docker build -t mydemo:v1 -f Dockerfile2 .</code></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215164914104.png" alt="image-20250215164914104"></p><p>镜像构建成功！</p><p>通过 <code>docker images</code> 查看镜像大小，可以看到只有103MB，比原来小了500多MB，优化了将近7.08倍。</p><p>换句话说，文件大小减少了大约86%</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215165237555.png" alt="image-20250215165237555"></p><p>好的，现在执行该镜像，看看效果是不是正常呢？</p><h2 id="四、运行镜像">四、运行镜像</h2><p><code>docker run -d -p 8091:8080 --name=mydemo 7f46db56915e</code></p><p>通过 d<code>ocker ps</code> 可以看到，镜像正常执行。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215165553029.png" alt="image-20250215165553029"></p><p>我们再去通过浏览器去访问一下应用是否能正常返回？</p><h2 id="五、查看运行效果">五、查看运行效果</h2><p>没问题！应用正常返回成功。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215165724327.png" alt="image-20250215165724327"></p><p>由此可见，通过Dockerfile的优化技巧，将镜像体积给缩小了，更多Dockerfile技巧也可以互相交流。</p><p>OK，希望这篇文章可以对你起到帮助。</p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>DockerFile</tag>
      
      <tag>优化镜像体积</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Typora.md文件上传CSDN图片会失效问题</title>
    <link href="/2025/02/15/%E5%85%B3%E4%BA%8ETypora-md%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0CSDN%E5%9B%BE%E7%89%87%E4%BC%9A%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/15/%E5%85%B3%E4%BA%8ETypora-md%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0CSDN%E5%9B%BE%E7%89%87%E4%BC%9A%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p><strong>前文提示：</strong></p><p><font color="red">已知</font>markdown文件导入到CSDN途中会出现“<strong>图片转存失败</strong>”,通过本次验证，通过PicGo与Typora软件实现<strong>上传关联</strong>，与阿里云OSS存储得到链接地址，解决导入.md文件会失效问题。</p><p><strong>CSDN图片失效效果图</strong></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215100840695.png" alt="image-20250215100840695"></p><h2 id="一、申请阿里云OSS存储服务">一、申请阿里云OSS存储服务</h2><p><a href="https://www.aliyun.com/product/oss?spm=5176.28536895.J_kUfM_yzYYqU72woCZLHoY.3.10be586cteDnoY">进入阿里云官网</a></p><p>选择产品–&gt;存储—&gt;对象存储OSS</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215100941488.png" alt="image-20250215100941488"></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215101206361.png" alt="image-20250215101206361"></p><h3 id="1、购买存储资源包">1、购买存储资源包</h3><p>进入当前页面，鼠标滚轮划到最下方，<strong>存储类型</strong>停留，选择<font color="red"><strong>存储资源包</strong></font>进入。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215101300377.png" alt="image-20250215101300377"></p><p>对照图片下方：OSS资源包、标准-本地冗余存储、中国内地通用、40GB</p><p>可以看到费用是**<font color="red">4.98</font>**元，在我的心理预期价位上，可以接受。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215101528397.png" alt="image-20250215101528397"></p><p>点击，立即购买就行。</p><h3 id="2、管理控制台">2、管理控制台</h3><p>第一步，进入管理控制台</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215102104837.png" alt="image-20250215102104837"></p><p>在左侧概览这里------&gt;Bucket管理下------&gt;创建Bucket</p><p>输入<strong>Bucket名称</strong>、<strong>地域</strong>，<strong>读写权限</strong>设置为公共读。</p><p>​      <strong><font color="red">注意点:</font></strong> 首次创建读写权限默认为私有，需要创建之后在控制台配置中修改</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215102434885.png" alt="image-20250215102434885"></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215102316376.png" alt="image-20250215102316376"></p><h3 id="3，右上角头像选择AccessKey">3，右上角头像选择<strong>AccessKey</strong></h3><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215103026622.png" alt="image-20250215103026622"></p><p>我确认知晓云账号 AccessKey 安全风险</p><p>继续使用云账号AccessKey。</p><p>这里默认已经创建好了创建AccessKey。</p><p><font color="red"><strong>需要保存好自己的ID和Secret！！！</strong></font></p><p>至此，阿里云OSS部分操作完成。</p><h2 id="二、下载PicGo">二、下载PicGo</h2><p>进入 <a href="https://github.com/Molunerfinn/PicGo/releases">下载地址</a> 选择合适的版本，进行安装，本次使用的是2.3.1 （<strong><font color="red">温馨提示</font></strong>：通过迅雷下载会更快哦）</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215104027222.png" alt="image-20250215104027222"></p><h3 id="Picgo配置">Picgo配置</h3><p>下载好之后，打开PicGo，在左侧导航栏中找到<strong>PicGo设置</strong>，勾选我们刚刚配置好的阿里云OSS</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215104417925.png" alt="image-20250215104417925"></p><p>在左侧导航栏选择图床设置 选择阿里云OSS进行配置</p><p><strong>温馨提示</strong>:存储区域类型可以在阿里云Bucket中找到</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215104556589.png" alt="image-20250215104556589"></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215105017976.png" alt="image-20250215105017976"></p><p>配置完成，点击左侧的上传区进行测试</p><p><strong>上传成功</strong>，说明阿里云OSS与PicGo的配置是正常的。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215105331297.png" alt="image-20250215105331297"></p><h2 id="三、Typora配置">三、Typora配置</h2><p>打开Typora，点击<strong>文件</strong>-选择<strong>偏好设置</strong></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215105648235.png" alt="image-20250215105648235"></p><p>左侧导航栏选择<strong>图像</strong>，</p><p>上传服务选择PicGo</p><p>PicGo路径选择PicGo的安装路径(<strong>温馨提示</strong>：这个地方需要手动选择，软件不会自动检索出来)</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215105817909.png" alt="image-20250215105817909"></p><p>设置完成后，点击 <strong>验证图片选项</strong>，如弹出下方验证成功提示，则说明配置成功。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215110105990.png" alt="image-20250215110105990"></p><h2 id="四、效果展示">四、效果展示</h2><p>OK，现在所有的配置已经完成，现在让我们来看看效果。</p><h3 id="Typora上传效果">Typora上传效果</h3><p><strong>上传前地址</strong>：</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215110610059.png" alt="image-20250215110610059"></p><p><strong>上传后地址</strong>：</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215110705564.png" alt="image-20250215110705564"></p><p>达到这个效果也很简单，选中图片，点击鼠标右键 选择<font color="red">上传图片</font>,图片地址会自动替换成阿里云的OSS图片地址。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215110810926.png" alt="image-20250215110810926"></p><h3 id="CSDN文章导入效果">CSDN文章导入效果</h3><p>可以看到，点击导入后，对应的md文件的图片正常展示了。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250215111124902.png" alt="image-20250215111124902"></p><p><strong>恭喜你，又看完一篇文章，<font size="10">在踏往山巅的路上</font>，迈出了自己的小小一步！</strong></p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>PicGo</tag>
      
      <tag>阿里云OSS存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DockerFile构建SpringBoot镜像</title>
    <link href="/2025/02/14/DockerFile%E6%9E%84%E5%BB%BASpringBoot%E9%95%9C%E5%83%8F/"/>
    <url>/2025/02/14/DockerFile%E6%9E%84%E5%BB%BASpringBoot%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h1>DockerFile构建Springboot镜像</h1><p><strong>本次文档基础上默认用户已经安装好Docker，不执行安装</strong></p><h2 id="一、首先创建一个Springboot应用">一、首先创建一个Springboot应用</h2><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214202833999.png" alt></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214202941746.png" alt="image-20250214202941746"></p><p>选择Spring Web，然后一直，下一步</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214203106472.png" alt="image-20250214203106472"></p><p>只需要一个Controller验证效果就可以了。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214203311650.png" alt="image-20250214203311650"></p><h4 id="font-color-red-记录我遇到的问题-font"><font color="red"><strong>记录我遇到的问题</strong></font></h4><p>java: 错误: 无效的源发行版：15 （程序运行时出现无效的源发行版）</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214203850281.png" alt="image-20250214203850281"></p><p><strong>这个地方也需要修改成8的版本</strong></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204140235.png" alt></p><p>查资料发现，Springboot的版本与jdk的版本不对应。</p><p><font color="Red"><strong>Springboot3.0以上的版本其<em>支持</em>的最低Java<em>版本</em>为<em>JDK</em> 17</strong></font></p><p><strong>本次测试的jdk版本为jdk8，所以需要调整pom文件依赖至3.0以下</strong></p><p><strong>此刻程序正常启动</strong></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204310910.png" alt></p><p>现在让我们将程序打成一个jar包，执行命令：<strong>mvn package</strong></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204532525.png" alt></p><p>OK，前置工作已准备好，现在先让我们来创建一个Dockerfile文件</p><p>1、通过阿里云镜像仓库找到openjdk的基础镜像地址</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204723546.png" alt></p><h2 id="二、创建Dockerfile">二、创建Dockerfile</h2><p>根据个人的版本选择，这里我选择的jdk8的版本</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204816994.png" alt></p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204838954.png" alt></p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#使用openjdk作为基础镜像</span><br><span class="hljs-keyword">FROM</span> anolis-registry.cn-zhangjiakou.cr.aliyuncs.com/openanolis/openjdk:<span class="hljs-number">8</span>-<span class="hljs-number">8.6</span><br><span class="hljs-comment">#设置作者信息</span><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> authors=<span class="hljs-string">"Zengping"</span></span><br><span class="hljs-comment">#构建镜像需要执行的命令</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> /home/hello1235</span><br><span class="hljs-comment">#设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-string">"/home/hello1235"</span></span><br><span class="hljs-comment">#将打包后的jar复制到指定目录</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./demo-0.0.1-SNAPSHOT.jar /home/hello1235/hello.jar</span><br><span class="hljs-comment">#容器暴露的端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-comment">#运行命令</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">"java"</span>,<span class="hljs-string">"-jar"</span>,<span class="hljs-string">"/home/hello1235/hello.jar"</span>]</span><br><br></code></pre></td></tr></tbody></table></figure><h2 id="三、将jar包与Dockerfile文件一起上传至服务器">三、将jar包与Dockerfile文件一起上传至服务器</h2><p>dockerfile文件写好之后，就上传到服务器上或虚拟机上，本次示例中使用的是虚拟机，ubuntu</p><p>通过xftp将jar包以及Dockerfile文件上传至指定目录</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214205902487.png" alt></p><h2 id="四、执行命令构建镜像">四、执行命令构建镜像</h2><p><code>docker build -t hello2:v1 .</code></p><p>容器构建成功！</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214211125864.png" alt></p><p>通过 docker images 命令可以看到，已经有一个叫hello2的镜像存在了。</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214211308245.png" alt></p><h2 id="五、启动镜像">五、启动镜像</h2><p>执行docker run 命令</p><p><code>docker run -d -p 8090:8080 --name=myhello 2fcb959ced7d</code></p><p>docker run 命令详解：</p><p>-d 表示后台启动</p><p>-p 宿主机的端口8090 映射容器暴露出来的8080端口</p><p>–name 容器别名</p><p>容器id 2fcb959ced7d</p><p>docker ps查看，容器启动成功！</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214213102171.png" alt></p><h2 id="六、查看效果，成功">六、查看效果，成功</h2><p>前往浏览器查看效果，执行成功！</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/image-20250214213152833.png" alt></p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>Dockerfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/02/12/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/02/12/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p>这是一片测试文章</p><p><img src="https://typora-syn--csdn.oss-cn-shenzhen.aliyuncs.com/test.jpg" alt="test.jpg"></p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/12/hello-world/"/>
    <url>/2025/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p></body></html>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
