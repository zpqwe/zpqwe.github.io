<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于Typora.md文件上传CSDN图片会失效问题</title>
    <link href="/2025/02/15/%E5%85%B3%E4%BA%8ETypora-md%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0CSDN%E5%9B%BE%E7%89%87%E4%BC%9A%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/15/%E5%85%B3%E4%BA%8ETypora-md%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0CSDN%E5%9B%BE%E7%89%87%E4%BC%9A%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p><strong>前文提示：</strong></p><p><font color="red">已知</font>markdown文件导入到CSDN途中会出现“<strong>图片转存失败</strong>”,通过本次验证，通过PicGo与Typora软件实现<strong>上传关联</strong>，与阿里云OSS存储得到链接地址，解决导入.md文件会失效问题。</p><p><strong>CSDN图片失效效果图</strong></p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215100840695.png" alt="image-20250215100840695"></p><h2 id="一、申请阿里云OSS存储服务">一、申请阿里云OSS存储服务</h2><p><a href="https://www.aliyun.com/product/oss?spm=5176.28536895.J_kUfM_yzYYqU72woCZLHoY.3.10be586cteDnoY">进入阿里云官网</a></p><p>选择产品–&gt;存储—&gt;对象存储OSS</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215100941488.png" alt="image-20250215100941488"></p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215101206361.png" alt="image-20250215101206361"></p><h3 id="1、购买存储资源包">1、购买存储资源包</h3><p>进入当前页面，鼠标滚轮划到最下方，<strong>存储类型</strong>停留，选择<font color="red"><strong>存储资源包</strong></font>进入。</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215101300377.png" alt="image-20250215101300377"></p><p>对照图片下方：OSS资源包、标准-本地冗余存储、中国内地通用、40GB</p><p>可以看到费用是**<font color="red">4.98</font>**元，在我的心理预期价位上，可以接受。</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215101528397.png" alt="image-20250215101528397"></p><p>点击，立即购买就行。</p><h3 id="2、管理控制台">2、管理控制台</h3><p>第一步，进入管理控制台</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215102104837.png" alt="image-20250215102104837"></p><p>在左侧概览这里------&gt;Bucket管理下------&gt;创建Bucket</p><p>输入<strong>Bucket名称</strong>、<strong>地域</strong>，<strong>读写权限</strong>设置为公共读。</p><p>​      <strong><font color="red">注意点:</font></strong> 首次创建读写权限默认为私有，需要创建之后在控制台配置中修改</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215102434885.png" alt="image-20250215102434885"></p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215102316376.png" alt="image-20250215102316376"></p><h3 id="3，右上角头像选择AccessKey">3，右上角头像选择<strong>AccessKey</strong></h3><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215103026622.png" alt="image-20250215103026622"></p><p>我确认知晓云账号 AccessKey 安全风险</p><p>继续使用云账号AccessKey。</p><p>这里默认已经创建好了创建AccessKey。</p><p><font color="red"><strong>需要保存好自己的ID和Secret！！！</strong></font></p><p>至此，阿里云OSS部分操作完成。</p><h2 id="二、下载PicGo">二、下载PicGo</h2><p>进入 <a href="https://github.com/Molunerfinn/PicGo/releases">下载地址</a> 选择合适的版本，进行安装，本次使用的是2.3.1 （<strong><font color="red">温馨提示</font></strong>：通过迅雷下载会更快哦）</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215104027222.png" alt="image-20250215104027222"></p><h3 id="Picgo配置">Picgo配置</h3><p>下载好之后，打开PicGo，在左侧导航栏中找到<strong>PicGo设置</strong>，勾选我们刚刚配置好的阿里云OSS</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215104417925.png" alt="image-20250215104417925"></p><p>在左侧导航栏选择图床设置 选择阿里云OSS进行配置</p><p><strong>温馨提示</strong>:存储区域类型可以在阿里云Bucket中找到</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215104556589.png" alt="image-20250215104556589"></p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215105017976.png" alt="image-20250215105017976"></p><p>配置完成，点击左侧的上传区进行测试</p><p><strong>上传成功</strong>，说明阿里云OSS与PicGo的配置是正常的。</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215105331297.png" alt="image-20250215105331297"></p><h2 id="三、Typora配置">三、Typora配置</h2><p>打开Typora，点击<strong>文件</strong>-选择<strong>偏好设置</strong></p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215105648235.png" alt="image-20250215105648235"></p><p>左侧导航栏选择<strong>图像</strong>，</p><p>上传服务选择PicGo</p><p>PicGo路径选择PicGo的安装路径(<strong>温馨提示</strong>：这个地方需要手动选择，软件不会自动检索出来)</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215105817909.png" alt="image-20250215105817909"></p><p>设置完成后，点击 <strong>验证图片选项</strong>，如弹出下方验证成功提示，则说明配置成功。</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215110105990.png" alt="image-20250215110105990"></p><h2 id="四、效果展示">四、效果展示</h2><p>OK，现在所有的配置已经完成，现在让我们来看看效果。</p><h3 id="Typora上传效果">Typora上传效果</h3><p><strong>上传前地址</strong>：</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215110610059.png" alt="image-20250215110610059"></p><p><strong>上传后地址</strong>：</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215110705564.png" alt="image-20250215110705564"></p><p>达到这个效果也很简单，选中图片，点击鼠标右键 选择<font color="red">上传图片</font>,图片地址会自动替换成阿里云的OSS图片地址。</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215110810926.png" alt="image-20250215110810926"></p><h3 id="CSDN文章导入效果">CSDN文章导入效果</h3><p>可以看到，点击导入后，对应的md文件的图片正常展示了。</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250215111124902.png" alt="image-20250215111124902"></p><p><strong>恭喜你，又看完一篇文章，<font size="10">在踏往山巅的路上</font>，迈出了自己的小小一步！</strong></p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>PicGo</tag>
      
      <tag>阿里云OSS存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DockerFile构建SpringBoot镜像</title>
    <link href="/2025/02/14/DockerFile%E6%9E%84%E5%BB%BASpringBoot%E9%95%9C%E5%83%8F/"/>
    <url>/2025/02/14/DockerFile%E6%9E%84%E5%BB%BASpringBoot%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h1>DockerFile构建Springboot镜像</h1><p><strong>本次文档基础上默认用户已经安装好Docker，不执行安装</strong></p><h2 id="一、首先创建一个Springboot应用">一、首先创建一个Springboot应用</h2><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214202833999.png" alt></p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214202941746.png" alt="image-20250214202941746"></p><p>选择Spring Web，然后一直，下一步</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214203106472.png" alt="image-20250214203106472"></p><p>只需要一个Controller验证效果就可以了。</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214203311650.png" alt="image-20250214203311650"></p><h4 id="font-color-red-记录我遇到的问题-font"><font color="red"><strong>记录我遇到的问题</strong></font></h4><p>java: 错误: 无效的源发行版：15 （程序运行时出现无效的源发行版）</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214203850281.png" alt="image-20250214203850281"></p><p><strong>这个地方也需要修改成8的版本</strong></p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204140235.png" alt></p><p>查资料发现，Springboot的版本与jdk的版本不对应。</p><p><font color="Red"><strong>Springboot3.0以上的版本其<em>支持</em>的最低Java<em>版本</em>为<em>JDK</em> 17</strong></font></p><p><strong>本次测试的jdk版本为jdk8，所以需要调整pom文件依赖至3.0以下</strong></p><p><strong>此刻程序正常启动</strong></p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204310910.png" alt></p><p>现在让我们将程序打成一个jar包，执行命令：<strong>mvn package</strong></p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204532525.png" alt></p><p>OK，前置工作已准备好，现在先让我们来创建一个Dockerfile文件</p><p>1、通过阿里云镜像仓库找到openjdk的基础镜像地址</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204723546.png" alt></p><h2 id="二、创建Dockerfile">二、创建Dockerfile</h2><p>根据个人的版本选择，这里我选择的jdk8的版本</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204816994.png" alt></p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214204838954.png" alt></p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#使用openjdk作为基础镜像</span><br><span class="hljs-keyword">FROM</span> anolis-registry.cn-zhangjiakou.cr.aliyuncs.com/openanolis/openjdk:<span class="hljs-number">8</span>-<span class="hljs-number">8.6</span><br><span class="hljs-comment">#设置作者信息</span><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> authors=<span class="hljs-string">"Zengping"</span></span><br><span class="hljs-comment">#构建镜像需要执行的命令</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> /home/hello1235</span><br><span class="hljs-comment">#设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-string">"/home/hello1235"</span></span><br><span class="hljs-comment">#将打包后的jar复制到指定目录</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./demo-0.0.1-SNAPSHOT.jar /home/hello1235/hello.jar</span><br><span class="hljs-comment">#容器暴露的端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-comment">#运行命令</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">"java"</span>,<span class="hljs-string">"-jar"</span>,<span class="hljs-string">"/home/hello1235/hello.jar"</span>]</span><br><br></code></pre></td></tr></tbody></table></figure><h2 id="三、将jar包与Dockerfile文件一起上传至服务器">三、将jar包与Dockerfile文件一起上传至服务器</h2><p>dockerfile文件写好之后，就上传到服务器上或虚拟机上，本次示例中使用的是虚拟机，ubuntu</p><p>通过xftp将jar包以及Dockerfile文件上传至指定目录</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214205902487.png" alt></p><h2 id="四、执行命令构建镜像">四、执行命令构建镜像</h2><p><code>docker build -t hello2:v1 .</code></p><p>容器构建成功！</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214211125864.png" alt></p><p>通过 docker images 命令可以看到，已经有一个叫hello2的镜像存在了。</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214211308245.png" alt></p><h2 id="五、启动镜像">五、启动镜像</h2><p>执行docker run 命令</p><p><code>docker run -d -p 8090:8080 --name=myhello 2fcb959ced7d</code></p><p>docker run 命令详解：</p><p>-d 表示后台启动</p><p>-p 宿主机的端口8090 映射容器暴露出来的8080端口</p><p>–name 容器别名</p><p>容器id 2fcb959ced7d</p><p>docker ps查看，容器启动成功！</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214213102171.png" alt></p><h2 id="六、查看效果，成功">六、查看效果，成功</h2><p>前往浏览器查看效果，执行成功！</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/image-20250214213152833.png" alt></p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>Dockerfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/02/12/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/02/12/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p>这是一片测试文章</p><p><img src="https://typora-syn-ccsdn.oss-cn-shenzhen.aliyuncs.com/test.jpg" alt="test.jpg"></p></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/12/hello-world/"/>
    <url>/2025/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p></body></html>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
